{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { encodeUtf8 } from '../util/utf8.mjs';\nimport { BinaryBuilder } from './binary.mjs';\nimport { BufferBuilder } from './buffer.mjs';\nimport { VariableWidthBuilder } from '../builder.mjs';\n/** @ignore */\nexport class Utf8Builder extends VariableWidthBuilder {\n  constructor(opts) {\n    super(opts);\n    this._values = new BufferBuilder(new Uint8Array(0));\n  }\n  get byteLength() {\n    let size = this._pendingLength + this.length * 4;\n    this._offsets && (size += this._offsets.byteLength);\n    this._values && (size += this._values.byteLength);\n    this._nulls && (size += this._nulls.byteLength);\n    return size;\n  }\n  setValue(index, value) {\n    return super.setValue(index, encodeUtf8(value));\n  }\n  // @ts-ignore\n  _flushPending(pending, pendingLength) {}\n}\nUtf8Builder.prototype._flushPending = BinaryBuilder.prototype._flushPending;","map":{"version":3,"names":["encodeUtf8","BinaryBuilder","BufferBuilder","VariableWidthBuilder","Utf8Builder","constructor","opts","_values","Uint8Array","byteLength","size","_pendingLength","length","_offsets","_nulls","setValue","index","value","_flushPending","pending","pendingLength","prototype"],"sources":["C:\\Users\\emclulo\\Downloads\\GitHub\\Banco_de_Dados--Associacao_Sindrome_de_Down\\timetable_canvas\\frontend\\node_modules\\apache-arrow\\src\\builder\\utf8.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Utf8 } from '../type.js';\r\nimport { encodeUtf8 } from '../util/utf8.js';\r\nimport { BinaryBuilder } from './binary.js';\r\nimport { BufferBuilder } from './buffer.js';\r\nimport { VariableWidthBuilder, BuilderOptions } from '../builder.js';\r\n\r\n/** @ignore */\r\nexport class Utf8Builder<TNull = any> extends VariableWidthBuilder<Utf8, TNull> {\r\n    constructor(opts: BuilderOptions<Utf8, TNull>) {\r\n        super(opts);\r\n        this._values = new BufferBuilder(new Uint8Array(0));\r\n    }\r\n    public get byteLength(): number {\r\n        let size = this._pendingLength + (this.length * 4);\r\n        this._offsets && (size += this._offsets.byteLength);\r\n        this._values && (size += this._values.byteLength);\r\n        this._nulls && (size += this._nulls.byteLength);\r\n        return size;\r\n    }\r\n    public setValue(index: number, value: string) {\r\n        return super.setValue(index, encodeUtf8(value) as any);\r\n    }\r\n    // @ts-ignore\r\n    protected _flushPending(pending: Map<number, Uint8Array | undefined>, pendingLength: number): void { }\r\n}\r\n\r\n(Utf8Builder.prototype as any)._flushPending = (BinaryBuilder.prototype as any)._flushPending;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,SAASA,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,aAAa,QAAQ,cAAc;AAC5C,SAASC,aAAa,QAAQ,cAAc;AAC5C,SAASC,oBAAoB,QAAwB,gBAAgB;AAErE;AACA,OAAM,MAAOC,WAAyB,SAAQD,oBAAiC;EAC3EE,YAAYC,IAAiC;IACzC,KAAK,CAACA,IAAI,CAAC;IACX,IAAI,CAACC,OAAO,GAAG,IAAIL,aAAa,CAAC,IAAIM,UAAU,CAAC,CAAC,CAAC,CAAC;EACvD;EACA,IAAWC,UAAUA,CAAA;IACjB,IAAIC,IAAI,GAAG,IAAI,CAACC,cAAc,GAAI,IAAI,CAACC,MAAM,GAAG,CAAE;IAClD,IAAI,CAACC,QAAQ,KAAKH,IAAI,IAAI,IAAI,CAACG,QAAQ,CAACJ,UAAU,CAAC;IACnD,IAAI,CAACF,OAAO,KAAKG,IAAI,IAAI,IAAI,CAACH,OAAO,CAACE,UAAU,CAAC;IACjD,IAAI,CAACK,MAAM,KAAKJ,IAAI,IAAI,IAAI,CAACI,MAAM,CAACL,UAAU,CAAC;IAC/C,OAAOC,IAAI;EACf;EACOK,QAAQA,CAACC,KAAa,EAAEC,KAAa;IACxC,OAAO,KAAK,CAACF,QAAQ,CAACC,KAAK,EAAEhB,UAAU,CAACiB,KAAK,CAAQ,CAAC;EAC1D;EACA;EACUC,aAAaA,CAACC,OAA4C,EAAEC,aAAqB,GAAU;;AAGxGhB,WAAW,CAACiB,SAAiB,CAACH,aAAa,GAAIjB,aAAa,CAACoB,SAAiB,CAACH,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}