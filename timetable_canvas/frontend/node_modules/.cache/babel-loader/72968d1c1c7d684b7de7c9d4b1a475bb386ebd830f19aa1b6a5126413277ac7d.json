{"ast":null,"code":"// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { RecordBatch } from './record-batch.mjs';\n/**\r\n * For sending dictionary encoding information. Any Field can be\r\n * dictionary-encoded, but in this case none of its children may be\r\n * dictionary-encoded.\r\n * There is one vector / column per dictionary, but that vector / column\r\n * may be spread across multiple dictionary batches by using the isDelta\r\n * flag\r\n */\nexport class DictionaryBatch {\n  constructor() {\n    this.bb = null;\n    this.bb_pos = 0;\n  }\n  __init(i, bb) {\n    this.bb_pos = i;\n    this.bb = bb;\n    return this;\n  }\n  static getRootAsDictionaryBatch(bb, obj) {\n    return (obj || new DictionaryBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n  }\n  static getSizePrefixedRootAsDictionaryBatch(bb, obj) {\n    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n    return (obj || new DictionaryBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n  }\n  id() {\n    const offset = this.bb.__offset(this.bb_pos, 4);\n    return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n  }\n  data(obj) {\n    const offset = this.bb.__offset(this.bb_pos, 6);\n    return offset ? (obj || new RecordBatch()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n  }\n  /**\r\n   * If isDelta is true the values in the dictionary are to be appended to a\r\n   * dictionary with the indicated id. If isDelta is false this dictionary\r\n   * should replace the existing dictionary.\r\n   */\n  isDelta() {\n    const offset = this.bb.__offset(this.bb_pos, 8);\n    return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n  }\n  static startDictionaryBatch(builder) {\n    builder.startObject(3);\n  }\n  static addId(builder, id) {\n    builder.addFieldInt64(0, id, builder.createLong(0, 0));\n  }\n  static addData(builder, dataOffset) {\n    builder.addFieldOffset(1, dataOffset, 0);\n  }\n  static addIsDelta(builder, isDelta) {\n    builder.addFieldInt8(2, +isDelta, +false);\n  }\n  static endDictionaryBatch(builder) {\n    const offset = builder.endObject();\n    return offset;\n  }\n}","map":{"version":3,"names":["flatbuffers","RecordBatch","DictionaryBatch","constructor","bb","bb_pos","__init","i","getRootAsDictionaryBatch","obj","readInt32","position","getSizePrefixedRootAsDictionaryBatch","setPosition","SIZE_PREFIX_LENGTH","id","offset","__offset","readInt64","createLong","data","__indirect","isDelta","readInt8","startDictionaryBatch","builder","startObject","addId","addFieldInt64","addData","dataOffset","addFieldOffset","addIsDelta","addFieldInt8","endDictionaryBatch","endObject"],"sources":["C:\\Users\\emclulo\\Downloads\\GitHub\\Banco_de_Dados--Associacao_Sindrome_de_Down\\timetable_canvas\\frontend\\node_modules\\apache-arrow\\src\\fb\\dictionary-batch.ts"],"sourcesContent":["// automatically generated by the FlatBuffers compiler, do not modify\r\n\r\nimport * as flatbuffers from 'flatbuffers';\r\n\r\nimport { RecordBatch } from './record-batch.js';\r\n\r\n\r\n/**\r\n * For sending dictionary encoding information. Any Field can be\r\n * dictionary-encoded, but in this case none of its children may be\r\n * dictionary-encoded.\r\n * There is one vector / column per dictionary, but that vector / column\r\n * may be spread across multiple dictionary batches by using the isDelta\r\n * flag\r\n */\r\nexport class DictionaryBatch {\r\n  bb: flatbuffers.ByteBuffer|null = null;\r\n  bb_pos = 0;\r\n__init(i:number, bb:flatbuffers.ByteBuffer):DictionaryBatch {\r\n  this.bb_pos = i;\r\n  this.bb = bb;\r\n  return this;\r\n}\r\n\r\nstatic getRootAsDictionaryBatch(bb:flatbuffers.ByteBuffer, obj?:DictionaryBatch):DictionaryBatch {\r\n  return (obj || new DictionaryBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n}\r\n\r\nstatic getSizePrefixedRootAsDictionaryBatch(bb:flatbuffers.ByteBuffer, obj?:DictionaryBatch):DictionaryBatch {\r\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n  return (obj || new DictionaryBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n}\r\n\r\nid():flatbuffers.Long {\r\n  const offset = this.bb!.__offset(this.bb_pos, 4);\r\n  return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n}\r\n\r\ndata(obj?:RecordBatch):RecordBatch|null {\r\n  const offset = this.bb!.__offset(this.bb_pos, 6);\r\n  return offset ? (obj || new RecordBatch()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\r\n}\r\n\r\n/**\r\n * If isDelta is true the values in the dictionary are to be appended to a\r\n * dictionary with the indicated id. If isDelta is false this dictionary\r\n * should replace the existing dictionary.\r\n */\r\nisDelta():boolean {\r\n  const offset = this.bb!.__offset(this.bb_pos, 8);\r\n  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\r\n}\r\n\r\nstatic startDictionaryBatch(builder:flatbuffers.Builder) {\r\n  builder.startObject(3);\r\n}\r\n\r\nstatic addId(builder:flatbuffers.Builder, id:flatbuffers.Long) {\r\n  builder.addFieldInt64(0, id, builder.createLong(0, 0));\r\n}\r\n\r\nstatic addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {\r\n  builder.addFieldOffset(1, dataOffset, 0);\r\n}\r\n\r\nstatic addIsDelta(builder:flatbuffers.Builder, isDelta:boolean) {\r\n  builder.addFieldInt8(2, +isDelta, +false);\r\n}\r\n\r\nstatic endDictionaryBatch(builder:flatbuffers.Builder):flatbuffers.Offset {\r\n  const offset = builder.endObject();\r\n  return offset;\r\n}\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}