{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BigInt64Array, BigUint64Array } from './compat.mjs';\n/** @ignore */\nconst undf = void 0;\n/** @ignore */\nexport function valueToString(x) {\n  if (x === null) {\n    return 'null';\n  }\n  if (x === undf) {\n    return 'undefined';\n  }\n  switch (typeof x) {\n    case 'number':\n      return \"\".concat(x);\n    case 'bigint':\n      return \"\".concat(x);\n    case 'string':\n      return \"\\\"\".concat(x, \"\\\"\");\n  }\n  // If [Symbol.toPrimitive] is implemented (like in BN)\n  // use it instead of JSON.stringify(). This ensures we\n  // print BigInts, Decimals, and Binary in their native\n  // representation\n  if (typeof x[Symbol.toPrimitive] === 'function') {\n    return x[Symbol.toPrimitive]('string');\n  }\n  if (ArrayBuffer.isView(x)) {\n    if (x instanceof BigInt64Array || x instanceof BigUint64Array) {\n      return \"[\".concat([...x].map(x => valueToString(x)), \"]\");\n    }\n    return \"[\".concat(x, \"]\");\n  }\n  return ArrayBuffer.isView(x) ? \"[\".concat(x, \"]\") : JSON.stringify(x, (_, y) => typeof y === 'bigint' ? \"\".concat(y) : y);\n}","map":{"version":3,"names":["BigInt64Array","BigUint64Array","undf","valueToString","x","concat","Symbol","toPrimitive","ArrayBuffer","isView","map","JSON","stringify","_","y"],"sources":["C:\\Users\\emclulo\\Downloads\\GitHub\\Banco_de_Dados--Associacao_Sindrome_de_Down\\timetable_canvas\\frontend\\node_modules\\apache-arrow\\src\\util\\pretty.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { BigInt64Array, BigUint64Array } from './compat.js';\r\n\r\n/** @ignore */ const undf = void (0);\r\n\r\n/** @ignore */\r\nexport function valueToString(x: any): string {\r\n    if (x === null) { return 'null'; }\r\n    if (x === undf) { return 'undefined'; }\r\n    switch (typeof x) {\r\n        case 'number': return `${x}`;\r\n        case 'bigint': return `${x}`;\r\n        case 'string': return `\"${x}\"`;\r\n    }\r\n    // If [Symbol.toPrimitive] is implemented (like in BN)\r\n    // use it instead of JSON.stringify(). This ensures we\r\n    // print BigInts, Decimals, and Binary in their native\r\n    // representation\r\n    if (typeof x[Symbol.toPrimitive] === 'function') {\r\n        return x[Symbol.toPrimitive]('string');\r\n    }\r\n    if (ArrayBuffer.isView(x)) {\r\n        if (x instanceof BigInt64Array || x instanceof BigUint64Array) {\r\n            return `[${[...x].map(x => valueToString(x))}]`;\r\n        }\r\n        return `[${x}]`;\r\n    }\r\n    return ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x, (_, y) => typeof y === 'bigint' ? `${y}` : y);\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,aAAa,EAAEC,cAAc,QAAQ,cAAc;AAE5D;AAAe,MAAMC,IAAI,GAAG,KAAM,CAAE;AAEpC;AACA,OAAM,SAAUC,aAAaA,CAACC,CAAM;EAChC,IAAIA,CAAC,KAAK,IAAI,EAAE;IAAE,OAAO,MAAM;;EAC/B,IAAIA,CAAC,KAAKF,IAAI,EAAE;IAAE,OAAO,WAAW;;EACpC,QAAQ,OAAOE,CAAC;IACZ,KAAK,QAAQ;MAAE,UAAAC,MAAA,CAAUD,CAAC;IAC1B,KAAK,QAAQ;MAAE,UAAAC,MAAA,CAAUD,CAAC;IAC1B,KAAK,QAAQ;MAAE,YAAAC,MAAA,CAAWD,CAAC;;EAE/B;EACA;EACA;EACA;EACA,IAAI,OAAOA,CAAC,CAACE,MAAM,CAACC,WAAW,CAAC,KAAK,UAAU,EAAE;IAC7C,OAAOH,CAAC,CAACE,MAAM,CAACC,WAAW,CAAC,CAAC,QAAQ,CAAC;;EAE1C,IAAIC,WAAW,CAACC,MAAM,CAACL,CAAC,CAAC,EAAE;IACvB,IAAIA,CAAC,YAAYJ,aAAa,IAAII,CAAC,YAAYH,cAAc,EAAE;MAC3D,WAAAI,MAAA,CAAW,CAAC,GAAGD,CAAC,CAAC,CAACM,GAAG,CAACN,CAAC,IAAID,aAAa,CAACC,CAAC,CAAC,CAAC;;IAEhD,WAAAC,MAAA,CAAWD,CAAC;;EAEhB,OAAOI,WAAW,CAACC,MAAM,CAACL,CAAC,CAAC,OAAAC,MAAA,CAAOD,CAAC,SAAMO,IAAI,CAACC,SAAS,CAACR,CAAC,EAAE,CAACS,CAAC,EAAEC,CAAC,KAAK,OAAOA,CAAC,KAAK,QAAQ,MAAAT,MAAA,CAAMS,CAAC,IAAKA,CAAC,CAAC;AAC7G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}