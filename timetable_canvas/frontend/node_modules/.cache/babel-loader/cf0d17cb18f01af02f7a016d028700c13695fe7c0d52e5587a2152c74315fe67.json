{"ast":null,"code":"// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\n/**\r\n * Exact decimal value represented as an integer value in two's\r\n * complement. Currently only 128-bit (16-byte) and 256-bit (32-byte) integers\r\n * are used. The representation uses the endianness indicated\r\n * in the Schema.\r\n */\nexport class Decimal {\n  constructor() {\n    this.bb = null;\n    this.bb_pos = 0;\n  }\n  __init(i, bb) {\n    this.bb_pos = i;\n    this.bb = bb;\n    return this;\n  }\n  static getRootAsDecimal(bb, obj) {\n    return (obj || new Decimal()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n  }\n  static getSizePrefixedRootAsDecimal(bb, obj) {\n    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n    return (obj || new Decimal()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n  }\n  /**\r\n   * Total number of decimal digits\r\n   */\n  precision() {\n    const offset = this.bb.__offset(this.bb_pos, 4);\n    return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n  }\n  /**\r\n   * Number of digits after the decimal point \".\"\r\n   */\n  scale() {\n    const offset = this.bb.__offset(this.bb_pos, 6);\n    return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n  }\n  /**\r\n   * Number of bits per value. The only accepted widths are 128 and 256.\r\n   * We use bitWidth for consistency with Int::bitWidth.\r\n   */\n  bitWidth() {\n    const offset = this.bb.__offset(this.bb_pos, 8);\n    return offset ? this.bb.readInt32(this.bb_pos + offset) : 128;\n  }\n  static startDecimal(builder) {\n    builder.startObject(3);\n  }\n  static addPrecision(builder, precision) {\n    builder.addFieldInt32(0, precision, 0);\n  }\n  static addScale(builder, scale) {\n    builder.addFieldInt32(1, scale, 0);\n  }\n  static addBitWidth(builder, bitWidth) {\n    builder.addFieldInt32(2, bitWidth, 128);\n  }\n  static endDecimal(builder) {\n    const offset = builder.endObject();\n    return offset;\n  }\n  static createDecimal(builder, precision, scale, bitWidth) {\n    Decimal.startDecimal(builder);\n    Decimal.addPrecision(builder, precision);\n    Decimal.addScale(builder, scale);\n    Decimal.addBitWidth(builder, bitWidth);\n    return Decimal.endDecimal(builder);\n  }\n}","map":{"version":3,"names":["flatbuffers","Decimal","constructor","bb","bb_pos","__init","i","getRootAsDecimal","obj","readInt32","position","getSizePrefixedRootAsDecimal","setPosition","SIZE_PREFIX_LENGTH","precision","offset","__offset","scale","bitWidth","startDecimal","builder","startObject","addPrecision","addFieldInt32","addScale","addBitWidth","endDecimal","endObject","createDecimal"],"sources":["C:\\Users\\emclulo\\Downloads\\GitHub\\Banco_de_Dados--Associacao_Sindrome_de_Down\\timetable_canvas\\frontend\\node_modules\\apache-arrow\\src\\fb\\decimal.ts"],"sourcesContent":["// automatically generated by the FlatBuffers compiler, do not modify\r\n\r\nimport * as flatbuffers from 'flatbuffers';\r\n\r\n/**\r\n * Exact decimal value represented as an integer value in two's\r\n * complement. Currently only 128-bit (16-byte) and 256-bit (32-byte) integers\r\n * are used. The representation uses the endianness indicated\r\n * in the Schema.\r\n */\r\nexport class Decimal {\r\n  bb: flatbuffers.ByteBuffer|null = null;\r\n  bb_pos = 0;\r\n__init(i:number, bb:flatbuffers.ByteBuffer):Decimal {\r\n  this.bb_pos = i;\r\n  this.bb = bb;\r\n  return this;\r\n}\r\n\r\nstatic getRootAsDecimal(bb:flatbuffers.ByteBuffer, obj?:Decimal):Decimal {\r\n  return (obj || new Decimal()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n}\r\n\r\nstatic getSizePrefixedRootAsDecimal(bb:flatbuffers.ByteBuffer, obj?:Decimal):Decimal {\r\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n  return (obj || new Decimal()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n}\r\n\r\n/**\r\n * Total number of decimal digits\r\n */\r\nprecision():number {\r\n  const offset = this.bb!.__offset(this.bb_pos, 4);\r\n  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\r\n}\r\n\r\n/**\r\n * Number of digits after the decimal point \".\"\r\n */\r\nscale():number {\r\n  const offset = this.bb!.__offset(this.bb_pos, 6);\r\n  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\r\n}\r\n\r\n/**\r\n * Number of bits per value. The only accepted widths are 128 and 256.\r\n * We use bitWidth for consistency with Int::bitWidth.\r\n */\r\nbitWidth():number {\r\n  const offset = this.bb!.__offset(this.bb_pos, 8);\r\n  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 128;\r\n}\r\n\r\nstatic startDecimal(builder:flatbuffers.Builder) {\r\n  builder.startObject(3);\r\n}\r\n\r\nstatic addPrecision(builder:flatbuffers.Builder, precision:number) {\r\n  builder.addFieldInt32(0, precision, 0);\r\n}\r\n\r\nstatic addScale(builder:flatbuffers.Builder, scale:number) {\r\n  builder.addFieldInt32(1, scale, 0);\r\n}\r\n\r\nstatic addBitWidth(builder:flatbuffers.Builder, bitWidth:number) {\r\n  builder.addFieldInt32(2, bitWidth, 128);\r\n}\r\n\r\nstatic endDecimal(builder:flatbuffers.Builder):flatbuffers.Offset {\r\n  const offset = builder.endObject();\r\n  return offset;\r\n}\r\n\r\nstatic createDecimal(builder:flatbuffers.Builder, precision:number, scale:number, bitWidth:number):flatbuffers.Offset {\r\n  Decimal.startDecimal(builder);\r\n  Decimal.addPrecision(builder, precision);\r\n  Decimal.addScale(builder, scale);\r\n  Decimal.addBitWidth(builder, bitWidth);\r\n  return Decimal.endDecimal(builder);\r\n}\r\n}\r\n"],"mappings":"AAAA;AAEA,OAAO,KAAKA,WAAW,MAAM,aAAa;AAE1C;;;;;;AAMA,OAAM,MAAOC,OAAO;EAApBC,YAAA;IACE,KAAAC,EAAE,GAAgC,IAAI;IACtC,KAAAC,MAAM,GAAG,CAAC;EAqEZ;EApEAC,MAAMA,CAACC,CAAQ,EAAEH,EAAyB;IACxC,IAAI,CAACC,MAAM,GAAGE,CAAC;IACf,IAAI,CAACH,EAAE,GAAGA,EAAE;IACZ,OAAO,IAAI;EACb;EAEA,OAAOI,gBAAgBA,CAACJ,EAAyB,EAAEK,GAAY;IAC7D,OAAO,CAACA,GAAG,IAAI,IAAIP,OAAO,EAAE,EAAEI,MAAM,CAACF,EAAE,CAACM,SAAS,CAACN,EAAE,CAACO,QAAQ,EAAE,CAAC,GAAGP,EAAE,CAACO,QAAQ,EAAE,EAAEP,EAAE,CAAC;EACvF;EAEA,OAAOQ,4BAA4BA,CAACR,EAAyB,EAAEK,GAAY;IACzEL,EAAE,CAACS,WAAW,CAACT,EAAE,CAACO,QAAQ,EAAE,GAAGV,WAAW,CAACa,kBAAkB,CAAC;IAC9D,OAAO,CAACL,GAAG,IAAI,IAAIP,OAAO,EAAE,EAAEI,MAAM,CAACF,EAAE,CAACM,SAAS,CAACN,EAAE,CAACO,QAAQ,EAAE,CAAC,GAAGP,EAAE,CAACO,QAAQ,EAAE,EAAEP,EAAE,CAAC;EACvF;EAEA;;;EAGAW,SAASA,CAAA;IACP,MAAMC,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACa,QAAQ,CAAC,IAAI,CAACZ,MAAM,EAAE,CAAC,CAAC;IAChD,OAAOW,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACM,SAAS,CAAC,IAAI,CAACL,MAAM,GAAGW,MAAM,CAAC,GAAG,CAAC;EAC9D;EAEA;;;EAGAE,KAAKA,CAAA;IACH,MAAMF,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACa,QAAQ,CAAC,IAAI,CAACZ,MAAM,EAAE,CAAC,CAAC;IAChD,OAAOW,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACM,SAAS,CAAC,IAAI,CAACL,MAAM,GAAGW,MAAM,CAAC,GAAG,CAAC;EAC9D;EAEA;;;;EAIAG,QAAQA,CAAA;IACN,MAAMH,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACa,QAAQ,CAAC,IAAI,CAACZ,MAAM,EAAE,CAAC,CAAC;IAChD,OAAOW,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACM,SAAS,CAAC,IAAI,CAACL,MAAM,GAAGW,MAAM,CAAC,GAAG,GAAG;EAChE;EAEA,OAAOI,YAAYA,CAACC,OAA2B;IAC7CA,OAAO,CAACC,WAAW,CAAC,CAAC,CAAC;EACxB;EAEA,OAAOC,YAAYA,CAACF,OAA2B,EAAEN,SAAgB;IAC/DM,OAAO,CAACG,aAAa,CAAC,CAAC,EAAET,SAAS,EAAE,CAAC,CAAC;EACxC;EAEA,OAAOU,QAAQA,CAACJ,OAA2B,EAAEH,KAAY;IACvDG,OAAO,CAACG,aAAa,CAAC,CAAC,EAAEN,KAAK,EAAE,CAAC,CAAC;EACpC;EAEA,OAAOQ,WAAWA,CAACL,OAA2B,EAAEF,QAAe;IAC7DE,OAAO,CAACG,aAAa,CAAC,CAAC,EAAEL,QAAQ,EAAE,GAAG,CAAC;EACzC;EAEA,OAAOQ,UAAUA,CAACN,OAA2B;IAC3C,MAAML,MAAM,GAAGK,OAAO,CAACO,SAAS,EAAE;IAClC,OAAOZ,MAAM;EACf;EAEA,OAAOa,aAAaA,CAACR,OAA2B,EAAEN,SAAgB,EAAEG,KAAY,EAAEC,QAAe;IAC/FjB,OAAO,CAACkB,YAAY,CAACC,OAAO,CAAC;IAC7BnB,OAAO,CAACqB,YAAY,CAACF,OAAO,EAAEN,SAAS,CAAC;IACxCb,OAAO,CAACuB,QAAQ,CAACJ,OAAO,EAAEH,KAAK,CAAC;IAChChB,OAAO,CAACwB,WAAW,CAACL,OAAO,EAAEF,QAAQ,CAAC;IACtC,OAAOjB,OAAO,CAACyB,UAAU,CAACN,OAAO,CAAC;EACpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}