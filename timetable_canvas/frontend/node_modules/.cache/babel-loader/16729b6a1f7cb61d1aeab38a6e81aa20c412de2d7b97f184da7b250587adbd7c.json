{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/* eslint-disable brace-style */\nimport * as flatbuffers from 'flatbuffers';\nimport { Schema as _Schema } from '../../fb/schema.mjs';\nimport { Int as _Int } from '../../fb/int.mjs';\nimport { RecordBatch as _RecordBatch } from '../../fb/record-batch.mjs';\nimport { DictionaryBatch as _DictionaryBatch } from '../../fb/dictionary-batch.mjs';\nimport { Buffer as _Buffer } from '../../fb/buffer.mjs';\nimport { Field as _Field } from '../../fb/field.mjs';\nimport { FieldNode as _FieldNode } from '../../fb/field-node.mjs';\nimport { Type } from '../../fb/type.mjs';\nimport { KeyValue as _KeyValue } from '../../fb/key-value.mjs';\nimport { Endianness as _Endianness } from '../../fb/endianness.mjs';\nimport { FloatingPoint as _FloatingPoint } from '../../fb/floating-point.mjs';\nimport { Decimal as _Decimal } from '../../fb/decimal.mjs';\nimport { Date as _Date } from '../../fb/date.mjs';\nimport { Time as _Time } from '../../fb/time.mjs';\nimport { Timestamp as _Timestamp } from '../../fb/timestamp.mjs';\nimport { Interval as _Interval } from '../../fb/interval.mjs';\nimport { Union as _Union } from '../../fb/union.mjs';\nimport { FixedSizeBinary as _FixedSizeBinary } from '../../fb/fixed-size-binary.mjs';\nimport { FixedSizeList as _FixedSizeList } from '../../fb/fixed-size-list.mjs';\nimport { Map as _Map } from '../../fb/map.mjs';\nimport { Message as _Message } from '../../fb/message.mjs';\nimport { Schema, Field } from '../../schema.mjs';\nimport { toUint8Array } from '../../util/buffer.mjs';\nimport { MessageHeader, MetadataVersion } from '../../enum.mjs';\nimport { instance as typeAssembler } from '../../visitor/typeassembler.mjs';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json.mjs';\nvar Long = flatbuffers.Long;\nvar Builder = flatbuffers.Builder;\nvar ByteBuffer = flatbuffers.ByteBuffer;\nimport { DataType, Dictionary, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct, Union, Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, Int32 } from '../../type.mjs';\n/**\r\n * @ignore\r\n * @private\r\n **/\nexport class Message {\n  constructor(bodyLength, version, headerType, header) {\n    this._version = version;\n    this._headerType = headerType;\n    this.body = new Uint8Array(0);\n    header && (this._createHeader = () => header);\n    this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n  }\n  /** @nocollapse */\n  static fromJSON(msg, headerType) {\n    const message = new Message(0, MetadataVersion.V4, headerType);\n    message._createHeader = messageHeaderFromJSON(msg, headerType);\n    return message;\n  }\n  /** @nocollapse */\n  static decode(buf) {\n    buf = new ByteBuffer(toUint8Array(buf));\n    const _message = _Message.getRootAsMessage(buf);\n    const bodyLength = _message.bodyLength();\n    const version = _message.version();\n    const headerType = _message.headerType();\n    const message = new Message(bodyLength, version, headerType);\n    message._createHeader = decodeMessageHeader(_message, headerType);\n    return message;\n  }\n  /** @nocollapse */\n  static encode(message) {\n    const b = new Builder();\n    let headerOffset = -1;\n    if (message.isSchema()) {\n      headerOffset = Schema.encode(b, message.header());\n    } else if (message.isRecordBatch()) {\n      headerOffset = RecordBatch.encode(b, message.header());\n    } else if (message.isDictionaryBatch()) {\n      headerOffset = DictionaryBatch.encode(b, message.header());\n    }\n    _Message.startMessage(b);\n    _Message.addVersion(b, MetadataVersion.V4);\n    _Message.addHeader(b, headerOffset);\n    _Message.addHeaderType(b, message.headerType);\n    _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n    _Message.finishMessageBuffer(b, _Message.endMessage(b));\n    return b.asUint8Array();\n  }\n  /** @nocollapse */\n  static from(header) {\n    let bodyLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    if (header instanceof Schema) {\n      return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n    }\n    if (header instanceof RecordBatch) {\n      return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n    }\n    if (header instanceof DictionaryBatch) {\n      return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n    }\n    throw new Error(\"Unrecognized Message header: \".concat(header));\n  }\n  get type() {\n    return this.headerType;\n  }\n  get version() {\n    return this._version;\n  }\n  get headerType() {\n    return this._headerType;\n  }\n  get bodyLength() {\n    return this._bodyLength;\n  }\n  header() {\n    return this._createHeader();\n  }\n  isSchema() {\n    return this.headerType === MessageHeader.Schema;\n  }\n  isRecordBatch() {\n    return this.headerType === MessageHeader.RecordBatch;\n  }\n  isDictionaryBatch() {\n    return this.headerType === MessageHeader.DictionaryBatch;\n  }\n}\n/**\r\n * @ignore\r\n * @private\r\n **/\nexport class RecordBatch {\n  constructor(length, nodes, buffers) {\n    this._nodes = nodes;\n    this._buffers = buffers;\n    this._length = typeof length === 'number' ? length : length.low;\n  }\n  get nodes() {\n    return this._nodes;\n  }\n  get length() {\n    return this._length;\n  }\n  get buffers() {\n    return this._buffers;\n  }\n}\n/**\r\n * @ignore\r\n * @private\r\n **/\nexport class DictionaryBatch {\n  constructor(data, id) {\n    let isDelta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this._data = data;\n    this._isDelta = isDelta;\n    this._id = typeof id === 'number' ? id : id.low;\n  }\n  get id() {\n    return this._id;\n  }\n  get data() {\n    return this._data;\n  }\n  get isDelta() {\n    return this._isDelta;\n  }\n  get length() {\n    return this.data.length;\n  }\n  get nodes() {\n    return this.data.nodes;\n  }\n  get buffers() {\n    return this.data.buffers;\n  }\n}\n/**\r\n * @ignore\r\n * @private\r\n **/\nexport class BufferRegion {\n  constructor(offset, length) {\n    this.offset = typeof offset === 'number' ? offset : offset.low;\n    this.length = typeof length === 'number' ? length : length.low;\n  }\n}\n/**\r\n * @ignore\r\n * @private\r\n **/\nexport class FieldNode {\n  constructor(length, nullCount) {\n    this.length = typeof length === 'number' ? length : length.low;\n    this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n  }\n}\n/** @ignore */\nfunction messageHeaderFromJSON(message, type) {\n  return () => {\n    switch (type) {\n      case MessageHeader.Schema:\n        return Schema.fromJSON(message);\n      case MessageHeader.RecordBatch:\n        return RecordBatch.fromJSON(message);\n      case MessageHeader.DictionaryBatch:\n        return DictionaryBatch.fromJSON(message);\n    }\n    throw new Error(\"Unrecognized Message type: { name: \".concat(MessageHeader[type], \", type: \").concat(type, \" }\"));\n  };\n}\n/** @ignore */\nfunction decodeMessageHeader(message, type) {\n  return () => {\n    switch (type) {\n      case MessageHeader.Schema:\n        return Schema.decode(message.header(new _Schema()));\n      case MessageHeader.RecordBatch:\n        return RecordBatch.decode(message.header(new _RecordBatch()), message.version());\n      case MessageHeader.DictionaryBatch:\n        return DictionaryBatch.decode(message.header(new _DictionaryBatch()), message.version());\n    }\n    throw new Error(\"Unrecognized Message type: { name: \".concat(MessageHeader[type], \", type: \").concat(type, \" }\"));\n  };\n}\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n/** @ignore */\nfunction decodeSchema(_schema) {\n  let dictionaries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Map();\n  const fields = decodeSchemaFields(_schema, dictionaries);\n  return new Schema(fields, decodeCustomMetadata(_schema), dictionaries);\n}\n/** @ignore */\nfunction decodeRecordBatch(batch) {\n  let version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MetadataVersion.V4;\n  if (batch.compression() !== null) {\n    throw new Error('Record batch compression not implemented');\n  }\n  return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n/** @ignore */\nfunction decodeDictionaryBatch(batch) {\n  let version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MetadataVersion.V4;\n  return new DictionaryBatch(RecordBatch.decode(batch.data(), version), batch.id(), batch.isDelta());\n}\n/** @ignore */\nfunction decodeBufferRegion(b) {\n  return new BufferRegion(b.offset(), b.length());\n}\n/** @ignore */\nfunction decodeFieldNode(f) {\n  return new FieldNode(f.length(), f.nullCount());\n}\n/** @ignore */\nfunction decodeFieldNodes(batch) {\n  const nodes = [];\n  for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\n    if (f = batch.nodes(i)) {\n      nodes[++j] = FieldNode.decode(f);\n    }\n  }\n  return nodes;\n}\n/** @ignore */\nfunction decodeBuffers(batch, version) {\n  const bufferRegions = [];\n  for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\n    if (b = batch.buffers(i)) {\n      // If this Arrow buffer was written before version 4,\n      // advance the buffer's bb_pos 8 bytes to skip past\n      // the now-removed page_id field\n      if (version < MetadataVersion.V4) {\n        b.bb_pos += 8 * (i + 1);\n      }\n      bufferRegions[++j] = BufferRegion.decode(b);\n    }\n  }\n  return bufferRegions;\n}\n/** @ignore */\nfunction decodeSchemaFields(schema, dictionaries) {\n  const fields = [];\n  for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\n    if (f = schema.fields(i)) {\n      fields[++j] = Field.decode(f, dictionaries);\n    }\n  }\n  return fields;\n}\n/** @ignore */\nfunction decodeFieldChildren(field, dictionaries) {\n  const children = [];\n  for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\n    if (f = field.children(i)) {\n      children[++j] = Field.decode(f, dictionaries);\n    }\n  }\n  return children;\n}\n/** @ignore */\nfunction decodeField(f, dictionaries) {\n  let id;\n  let field;\n  let type;\n  let keys;\n  let dictType;\n  let dictMeta;\n  // If no dictionary encoding\n  if (!dictionaries || !(dictMeta = f.dictionary())) {\n    type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));\n    field = new Field(f.name(), type, f.nullable(), decodeCustomMetadata(f));\n  }\n  // If dictionary encoded and the first time we've seen this dictionary id, decode\n  // the data type and child fields, then wrap in a Dictionary type and insert the\n  // data type into the dictionary types map.\n  else if (!dictionaries.has(id = dictMeta.id().low)) {\n    // a dictionary index defaults to signed 32 bit int if unspecified\n    keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new Int32();\n    dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));\n    dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n    field = new Field(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));\n  }\n  // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n  // data type and wrap in a new Dictionary type and field.\n  else {\n    // a dictionary index defaults to signed 32 bit int if unspecified\n    keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new Int32();\n    dictType = new Dictionary(dictionaries.get(id), keys, id, dictMeta.isOrdered());\n    field = new Field(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));\n  }\n  return field || null;\n}\n/** @ignore */\nfunction decodeCustomMetadata(parent) {\n  const data = new Map();\n  if (parent) {\n    for (let entry, key, i = -1, n = Math.trunc(parent.customMetadataLength()); ++i < n;) {\n      if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n        data.set(key, entry.value());\n      }\n    }\n  }\n  return data;\n}\n/** @ignore */\nfunction decodeIndexType(_type) {\n  return new Int(_type.isSigned(), _type.bitWidth());\n}\n/** @ignore */\nfunction decodeFieldType(f, children) {\n  const typeId = f.typeType();\n  switch (typeId) {\n    case Type['NONE']:\n      return new Null();\n    case Type['Null']:\n      return new Null();\n    case Type['Binary']:\n      return new Binary();\n    case Type['Utf8']:\n      return new Utf8();\n    case Type['Bool']:\n      return new Bool();\n    case Type['List']:\n      return new List((children || [])[0]);\n    case Type['Struct_']:\n      return new Struct(children || []);\n  }\n  switch (typeId) {\n    case Type['Int']:\n      {\n        const t = f.type(new _Int());\n        return new Int(t.isSigned(), t.bitWidth());\n      }\n    case Type['FloatingPoint']:\n      {\n        const t = f.type(new _FloatingPoint());\n        return new Float(t.precision());\n      }\n    case Type['Decimal']:\n      {\n        const t = f.type(new _Decimal());\n        return new Decimal(t.scale(), t.precision(), t.bitWidth());\n      }\n    case Type['Date']:\n      {\n        const t = f.type(new _Date());\n        return new Date_(t.unit());\n      }\n    case Type['Time']:\n      {\n        const t = f.type(new _Time());\n        return new Time(t.unit(), t.bitWidth());\n      }\n    case Type['Timestamp']:\n      {\n        const t = f.type(new _Timestamp());\n        return new Timestamp(t.unit(), t.timezone());\n      }\n    case Type['Interval']:\n      {\n        const t = f.type(new _Interval());\n        return new Interval(t.unit());\n      }\n    case Type['Union']:\n      {\n        const t = f.type(new _Union());\n        return new Union(t.mode(), t.typeIdsArray() || [], children || []);\n      }\n    case Type['FixedSizeBinary']:\n      {\n        const t = f.type(new _FixedSizeBinary());\n        return new FixedSizeBinary(t.byteWidth());\n      }\n    case Type['FixedSizeList']:\n      {\n        const t = f.type(new _FixedSizeList());\n        return new FixedSizeList(t.listSize(), (children || [])[0]);\n      }\n    case Type['Map']:\n      {\n        const t = f.type(new _Map());\n        return new Map_((children || [])[0], t.keysSorted());\n      }\n  }\n  throw new Error(\"Unrecognized type: \\\"\".concat(Type[typeId], \"\\\" (\").concat(typeId, \")\"));\n}\n/** @ignore */\nfunction encodeSchema(b, schema) {\n  const fieldOffsets = schema.fields.map(f => Field.encode(b, f));\n  _Schema.startFieldsVector(b, fieldOffsets.length);\n  const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n  const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 : _Schema.createCustomMetadataVector(b, [...schema.metadata].map(_ref => {\n    let [k, v] = _ref;\n    const key = b.createString(\"\".concat(k));\n    const val = b.createString(\"\".concat(v));\n    _KeyValue.startKeyValue(b);\n    _KeyValue.addKey(b, key);\n    _KeyValue.addValue(b, val);\n    return _KeyValue.endKeyValue(b);\n  }));\n  _Schema.startSchema(b);\n  _Schema.addFields(b, fieldsVectorOffset);\n  _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n  if (metadataOffset !== -1) {\n    _Schema.addCustomMetadata(b, metadataOffset);\n  }\n  return _Schema.endSchema(b);\n}\n/** @ignore */\nfunction encodeField(b, field) {\n  let nameOffset = -1;\n  let typeOffset = -1;\n  let dictionaryOffset = -1;\n  const type = field.type;\n  let typeId = field.typeId;\n  if (!DataType.isDictionary(type)) {\n    typeOffset = typeAssembler.visit(type, b);\n  } else {\n    typeId = type.dictionary.typeId;\n    dictionaryOffset = typeAssembler.visit(type, b);\n    typeOffset = typeAssembler.visit(type.dictionary, b);\n  }\n  const childOffsets = (type.children || []).map(f => Field.encode(b, f));\n  const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n  const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 : _Field.createCustomMetadataVector(b, [...field.metadata].map(_ref2 => {\n    let [k, v] = _ref2;\n    const key = b.createString(\"\".concat(k));\n    const val = b.createString(\"\".concat(v));\n    _KeyValue.startKeyValue(b);\n    _KeyValue.addKey(b, key);\n    _KeyValue.addValue(b, val);\n    return _KeyValue.endKeyValue(b);\n  }));\n  if (field.name) {\n    nameOffset = b.createString(field.name);\n  }\n  _Field.startField(b);\n  _Field.addType(b, typeOffset);\n  _Field.addTypeType(b, typeId);\n  _Field.addChildren(b, childrenVectorOffset);\n  _Field.addNullable(b, !!field.nullable);\n  if (nameOffset !== -1) {\n    _Field.addName(b, nameOffset);\n  }\n  if (dictionaryOffset !== -1) {\n    _Field.addDictionary(b, dictionaryOffset);\n  }\n  if (metadataOffset !== -1) {\n    _Field.addCustomMetadata(b, metadataOffset);\n  }\n  return _Field.endField(b);\n}\n/** @ignore */\nfunction encodeRecordBatch(b, recordBatch) {\n  const nodes = recordBatch.nodes || [];\n  const buffers = recordBatch.buffers || [];\n  _RecordBatch.startNodesVector(b, nodes.length);\n  for (const n of nodes.slice().reverse()) FieldNode.encode(b, n);\n  const nodesVectorOffset = b.endVector();\n  _RecordBatch.startBuffersVector(b, buffers.length);\n  for (const b_ of buffers.slice().reverse()) BufferRegion.encode(b, b_);\n  const buffersVectorOffset = b.endVector();\n  _RecordBatch.startRecordBatch(b);\n  _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n  _RecordBatch.addNodes(b, nodesVectorOffset);\n  _RecordBatch.addBuffers(b, buffersVectorOffset);\n  return _RecordBatch.endRecordBatch(b);\n}\n/** @ignore */\nfunction encodeDictionaryBatch(b, dictionaryBatch) {\n  const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n  _DictionaryBatch.startDictionaryBatch(b);\n  _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n  _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n  _DictionaryBatch.addData(b, dataOffset);\n  return _DictionaryBatch.endDictionaryBatch(b);\n}\n/** @ignore */\nfunction encodeFieldNode(b, node) {\n  return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n/** @ignore */\nfunction encodeBufferRegion(b, node) {\n  return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n/** @ignore */\nconst platformIsLittleEndian = (() => {\n  const buffer = new ArrayBuffer(2);\n  new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n  // Int16Array uses the platform's endianness.\n  return new Int16Array(buffer)[0] === 256;\n})();","map":{"version":3,"names":["flatbuffers","Schema","_Schema","Int","_Int","RecordBatch","_RecordBatch","DictionaryBatch","_DictionaryBatch","Buffer","_Buffer","Field","_Field","FieldNode","_FieldNode","Type","KeyValue","_KeyValue","Endianness","_Endianness","FloatingPoint","_FloatingPoint","Decimal","_Decimal","Date","_Date","Time","_Time","Timestamp","_Timestamp","Interval","_Interval","Union","_Union","FixedSizeBinary","_FixedSizeBinary","FixedSizeList","_FixedSizeList","Map","_Map","Message","_Message","toUint8Array","MessageHeader","MetadataVersion","instance","typeAssembler","fieldFromJSON","schemaFromJSON","recordBatchFromJSON","dictionaryBatchFromJSON","Long","Builder","ByteBuffer","DataType","Dictionary","Utf8","Binary","List","Map_","Struct","Bool","Null","Float","Date_","Int32","constructor","bodyLength","version","headerType","header","_version","_headerType","body","Uint8Array","_createHeader","_bodyLength","low","fromJSON","msg","message","V4","messageHeaderFromJSON","decode","buf","_message","getRootAsMessage","decodeMessageHeader","encode","b","headerOffset","isSchema","isRecordBatch","isDictionaryBatch","startMessage","addVersion","addHeader","addHeaderType","addBodyLength","finishMessageBuffer","endMessage","asUint8Array","from","arguments","length","undefined","Error","concat","type","nodes","buffers","_nodes","_buffers","_length","data","id","isDelta","_data","_isDelta","_id","BufferRegion","offset","nullCount","encodeField","decodeField","encodeSchema","decodeSchema","encodeRecordBatch","decodeRecordBatch","encodeDictionaryBatch","decodeDictionaryBatch","encodeFieldNode","decodeFieldNode","encodeBufferRegion","decodeBufferRegion","_schema","dictionaries","fields","decodeSchemaFields","decodeCustomMetadata","batch","compression","decodeFieldNodes","decodeBuffers","f","i","j","n","nodesLength","bufferRegions","buffersLength","bb_pos","schema","fieldsLength","decodeFieldChildren","field","children","childrenLength","keys","dictType","dictMeta","dictionary","decodeFieldType","name","nullable","has","indexType","decodeIndexType","set","isOrdered","get","parent","entry","key","Math","trunc","customMetadataLength","customMetadata","value","_type","isSigned","bitWidth","typeId","typeType","t","precision","scale","unit","timezone","mode","typeIdsArray","byteWidth","listSize","keysSorted","fieldOffsets","map","startFieldsVector","fieldsVectorOffset","createFieldsVector","metadataOffset","metadata","size","createCustomMetadataVector","_ref","k","v","createString","val","startKeyValue","addKey","addValue","endKeyValue","startSchema","addFields","addEndianness","platformIsLittleEndian","Little","Big","addCustomMetadata","endSchema","nameOffset","typeOffset","dictionaryOffset","isDictionary","visit","childOffsets","childrenVectorOffset","createChildrenVector","_ref2","startField","addType","addTypeType","addChildren","addNullable","addName","addDictionary","endField","recordBatch","startNodesVector","slice","reverse","nodesVectorOffset","endVector","startBuffersVector","b_","buffersVectorOffset","startRecordBatch","addLength","addNodes","addBuffers","endRecordBatch","dictionaryBatch","dataOffset","startDictionaryBatch","addId","addIsDelta","addData","endDictionaryBatch","node","createFieldNode","createBuffer","buffer","ArrayBuffer","DataView","setInt16","Int16Array"],"sources":["C:\\Users\\emclulo\\Downloads\\GitHub\\Banco_de_Dados--Associacao_Sindrome_de_Down\\timetable_canvas\\frontend\\node_modules\\apache-arrow\\src\\ipc\\metadata\\message.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\n/* eslint-disable brace-style */\r\n\r\nimport * as flatbuffers from 'flatbuffers';\r\n\r\nimport { Schema as _Schema } from '../../fb/schema.js';\r\nimport { Int as _Int } from '../../fb/int.js';\r\nimport { RecordBatch as _RecordBatch } from '../../fb/record-batch.js';\r\nimport { DictionaryBatch as _DictionaryBatch } from '../../fb/dictionary-batch.js';\r\nimport { Buffer as _Buffer } from '../../fb/buffer.js';\r\nimport { Field as _Field } from '../../fb/field.js';\r\nimport { FieldNode as _FieldNode } from '../../fb/field-node.js';\r\nimport { DictionaryEncoding as _DictionaryEncoding } from '../../fb/dictionary-encoding.js';\r\nimport { Type } from '../../fb/type.js';\r\nimport { KeyValue as _KeyValue } from '../../fb/key-value.js';\r\nimport { Endianness as _Endianness } from '../../fb/endianness.js';\r\nimport { FloatingPoint as _FloatingPoint } from '../../fb/floating-point.js';\r\nimport { Decimal as _Decimal } from '../../fb/decimal.js';\r\nimport { Date as _Date } from '../../fb/date.js';\r\nimport { Time as _Time } from '../../fb/time.js';\r\nimport { Timestamp as _Timestamp } from '../../fb/timestamp.js';\r\nimport { Interval as _Interval } from '../../fb/interval.js';\r\nimport { Union as _Union } from '../../fb/union.js';\r\nimport { FixedSizeBinary as _FixedSizeBinary } from '../../fb/fixed-size-binary.js';\r\nimport { FixedSizeList as _FixedSizeList } from '../../fb/fixed-size-list.js';\r\nimport { Map as _Map } from '../../fb/map.js';\r\nimport { Message as _Message } from '../../fb/message.js';\r\n\r\nimport { Schema, Field } from '../../schema.js';\r\nimport { toUint8Array } from '../../util/buffer.js';\r\nimport { ArrayBufferViewInput } from '../../util/buffer.js';\r\nimport { MessageHeader, MetadataVersion } from '../../enum.js';\r\nimport { instance as typeAssembler } from '../../visitor/typeassembler.js';\r\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json.js';\r\n\r\nimport Long = flatbuffers.Long;\r\nimport Builder = flatbuffers.Builder;\r\nimport ByteBuffer = flatbuffers.ByteBuffer;\r\n\r\nimport {\r\n    DataType, Dictionary, TimeBitWidth,\r\n    Utf8, Binary, Decimal, FixedSizeBinary,\r\n    List, FixedSizeList, Map_, Struct, Union,\r\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\r\n} from '../../type.js';\r\n\r\n/**\r\n * @ignore\r\n * @private\r\n **/\r\nexport class Message<T extends MessageHeader = any> {\r\n\r\n    /** @nocollapse */\r\n    public static fromJSON<T extends MessageHeader>(msg: any, headerType: T): Message<T> {\r\n        const message = new Message(0, MetadataVersion.V4, headerType);\r\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\r\n        return message;\r\n    }\r\n\r\n    /** @nocollapse */\r\n    public static decode(buf: ArrayBufferViewInput) {\r\n        buf = new ByteBuffer(toUint8Array(buf));\r\n        const _message = _Message.getRootAsMessage(buf);\r\n        const bodyLength: Long = _message.bodyLength()!;\r\n        const version: MetadataVersion = _message.version();\r\n        const headerType: MessageHeader = _message.headerType();\r\n        const message = new Message(bodyLength, version, headerType);\r\n        message._createHeader = decodeMessageHeader(_message, headerType);\r\n        return message;\r\n    }\r\n\r\n    /** @nocollapse */\r\n    public static encode<T extends MessageHeader>(message: Message<T>) {\r\n        const b = new Builder();\r\n        let headerOffset = -1;\r\n        if (message.isSchema()) {\r\n            headerOffset = Schema.encode(b, message.header() as Schema);\r\n        } else if (message.isRecordBatch()) {\r\n            headerOffset = RecordBatch.encode(b, message.header() as RecordBatch);\r\n        } else if (message.isDictionaryBatch()) {\r\n            headerOffset = DictionaryBatch.encode(b, message.header() as DictionaryBatch);\r\n        }\r\n        _Message.startMessage(b);\r\n        _Message.addVersion(b, MetadataVersion.V4);\r\n        _Message.addHeader(b, headerOffset);\r\n        _Message.addHeaderType(b, message.headerType);\r\n        _Message.addBodyLength(b, new Long(message.bodyLength, 0));\r\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\r\n        return b.asUint8Array();\r\n    }\r\n\r\n    /** @nocollapse */\r\n    public static from(header: Schema | RecordBatch | DictionaryBatch, bodyLength = 0) {\r\n        if (header instanceof Schema) {\r\n            return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\r\n        }\r\n        if (header instanceof RecordBatch) {\r\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\r\n        }\r\n        if (header instanceof DictionaryBatch) {\r\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\r\n        }\r\n        throw new Error(`Unrecognized Message header: ${header}`);\r\n    }\r\n\r\n    public body: Uint8Array;\r\n    protected _headerType: T;\r\n    protected _bodyLength: number;\r\n    protected _version: MetadataVersion;\r\n    public get type() { return this.headerType; }\r\n    public get version() { return this._version; }\r\n    public get headerType() { return this._headerType; }\r\n    public get bodyLength() { return this._bodyLength; }\r\n    declare protected _createHeader: MessageHeaderDecoder;\r\n    public header() { return this._createHeader<T>(); }\r\n    public isSchema(): this is Message<MessageHeader.Schema> { return this.headerType === MessageHeader.Schema; }\r\n    public isRecordBatch(): this is Message<MessageHeader.RecordBatch> { return this.headerType === MessageHeader.RecordBatch; }\r\n    public isDictionaryBatch(): this is Message<MessageHeader.DictionaryBatch> { return this.headerType === MessageHeader.DictionaryBatch; }\r\n\r\n    constructor(bodyLength: Long | number, version: MetadataVersion, headerType: T, header?: any) {\r\n        this._version = version;\r\n        this._headerType = headerType;\r\n        this.body = new Uint8Array(0);\r\n        header && (this._createHeader = () => header);\r\n        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @private\r\n **/\r\nexport class RecordBatch {\r\n    protected _length: number;\r\n    protected _nodes: FieldNode[];\r\n    protected _buffers: BufferRegion[];\r\n    public get nodes() { return this._nodes; }\r\n    public get length() { return this._length; }\r\n    public get buffers() { return this._buffers; }\r\n    constructor(length: Long | number, nodes: FieldNode[], buffers: BufferRegion[]) {\r\n        this._nodes = nodes;\r\n        this._buffers = buffers;\r\n        this._length = typeof length === 'number' ? length : length.low;\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @private\r\n **/\r\nexport class DictionaryBatch {\r\n\r\n    protected _id: number;\r\n    protected _isDelta: boolean;\r\n    protected _data: RecordBatch;\r\n    public get id() { return this._id; }\r\n    public get data() { return this._data; }\r\n    public get isDelta() { return this._isDelta; }\r\n    public get length(): number { return this.data.length; }\r\n    public get nodes(): FieldNode[] { return this.data.nodes; }\r\n    public get buffers(): BufferRegion[] { return this.data.buffers; }\r\n\r\n    constructor(data: RecordBatch, id: Long | number, isDelta = false) {\r\n        this._data = data;\r\n        this._isDelta = isDelta;\r\n        this._id = typeof id === 'number' ? id : id.low;\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @private\r\n **/\r\nexport class BufferRegion {\r\n    public offset: number;\r\n    public length: number;\r\n    constructor(offset: Long | number, length: Long | number) {\r\n        this.offset = typeof offset === 'number' ? offset : offset.low;\r\n        this.length = typeof length === 'number' ? length : length.low;\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @private\r\n **/\r\nexport class FieldNode {\r\n    public length: number;\r\n    public nullCount: number;\r\n    constructor(length: Long | number, nullCount: Long | number) {\r\n        this.length = typeof length === 'number' ? length : length.low;\r\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nfunction messageHeaderFromJSON(message: any, type: MessageHeader) {\r\n    return (() => {\r\n        switch (type) {\r\n            case MessageHeader.Schema: return Schema.fromJSON(message);\r\n            case MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\r\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\r\n        }\r\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\r\n    }) as MessageHeaderDecoder;\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeMessageHeader(message: _Message, type: MessageHeader) {\r\n    return (() => {\r\n        switch (type) {\r\n            case MessageHeader.Schema: return Schema.decode(message.header(new _Schema())!);\r\n            case MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch())!, message.version());\r\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch())!, message.version());\r\n        }\r\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\r\n    }) as MessageHeaderDecoder;\r\n}\r\n\r\nField['encode'] = encodeField;\r\nField['decode'] = decodeField;\r\nField['fromJSON'] = fieldFromJSON;\r\n\r\nSchema['encode'] = encodeSchema;\r\nSchema['decode'] = decodeSchema;\r\nSchema['fromJSON'] = schemaFromJSON;\r\n\r\nRecordBatch['encode'] = encodeRecordBatch;\r\nRecordBatch['decode'] = decodeRecordBatch;\r\nRecordBatch['fromJSON'] = recordBatchFromJSON;\r\n\r\nDictionaryBatch['encode'] = encodeDictionaryBatch;\r\nDictionaryBatch['decode'] = decodeDictionaryBatch;\r\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\r\n\r\nFieldNode['encode'] = encodeFieldNode;\r\nFieldNode['decode'] = decodeFieldNode;\r\n\r\nBufferRegion['encode'] = encodeBufferRegion;\r\nBufferRegion['decode'] = decodeBufferRegion;\r\n\r\ndeclare module '../../schema' {\r\n    namespace Field {\r\n        export { encodeField as encode };\r\n        export { decodeField as decode };\r\n        export { fieldFromJSON as fromJSON };\r\n    }\r\n    namespace Schema {\r\n        export { encodeSchema as encode };\r\n        export { decodeSchema as decode };\r\n        export { schemaFromJSON as fromJSON };\r\n    }\r\n}\r\n\r\ndeclare module './message' {\r\n    namespace RecordBatch {\r\n        export { encodeRecordBatch as encode };\r\n        export { decodeRecordBatch as decode };\r\n        export { recordBatchFromJSON as fromJSON };\r\n    }\r\n    namespace DictionaryBatch {\r\n        export { encodeDictionaryBatch as encode };\r\n        export { decodeDictionaryBatch as decode };\r\n        export { dictionaryBatchFromJSON as fromJSON };\r\n    }\r\n    namespace FieldNode {\r\n        export { encodeFieldNode as encode };\r\n        export { decodeFieldNode as decode };\r\n    }\r\n    namespace BufferRegion {\r\n        export { encodeBufferRegion as encode };\r\n        export { decodeBufferRegion as decode };\r\n    }\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeSchema(_schema: _Schema, dictionaries: Map<number, DataType> = new Map()) {\r\n    const fields = decodeSchemaFields(_schema, dictionaries);\r\n    return new Schema(fields, decodeCustomMetadata(_schema), dictionaries);\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeRecordBatch(batch: _RecordBatch, version = MetadataVersion.V4) {\r\n    if (batch.compression() !== null) {\r\n        throw new Error('Record batch compression not implemented');\r\n    }\r\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeDictionaryBatch(batch: _DictionaryBatch, version = MetadataVersion.V4) {\r\n    return new DictionaryBatch(RecordBatch.decode(batch.data()!, version), batch.id(), batch.isDelta());\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeBufferRegion(b: _Buffer) {\r\n    return new BufferRegion(b.offset(), b.length());\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeFieldNode(f: _FieldNode) {\r\n    return new FieldNode(f.length(), f.nullCount());\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeFieldNodes(batch: _RecordBatch) {\r\n    const nodes = [] as FieldNode[];\r\n    for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\r\n        if (f = batch.nodes(i)) {\r\n            nodes[++j] = FieldNode.decode(f);\r\n        }\r\n    }\r\n    return nodes;\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeBuffers(batch: _RecordBatch, version: MetadataVersion) {\r\n    const bufferRegions = [] as BufferRegion[];\r\n    for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\r\n        if (b = batch.buffers(i)) {\r\n            // If this Arrow buffer was written before version 4,\r\n            // advance the buffer's bb_pos 8 bytes to skip past\r\n            // the now-removed page_id field\r\n            if (version < MetadataVersion.V4) {\r\n                b.bb_pos += (8 * (i + 1));\r\n            }\r\n            bufferRegions[++j] = BufferRegion.decode(b);\r\n        }\r\n    }\r\n    return bufferRegions;\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeSchemaFields(schema: _Schema, dictionaries?: Map<number, DataType>) {\r\n    const fields = [] as Field[];\r\n    for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\r\n        if (f = schema.fields(i)) {\r\n            fields[++j] = Field.decode(f, dictionaries);\r\n        }\r\n    }\r\n    return fields;\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeFieldChildren(field: _Field, dictionaries?: Map<number, DataType>): Field[] {\r\n    const children = [] as Field[];\r\n    for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\r\n        if (f = field.children(i)) {\r\n            children[++j] = Field.decode(f, dictionaries);\r\n        }\r\n    }\r\n    return children;\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeField(f: _Field, dictionaries?: Map<number, DataType>) {\r\n\r\n    let id: number;\r\n    let field: Field | void;\r\n    let type: DataType<any>;\r\n    let keys: _Int | TKeys | null;\r\n    let dictType: Dictionary;\r\n    let dictMeta: _DictionaryEncoding | null;\r\n\r\n    // If no dictionary encoding\r\n    if (!dictionaries || !(dictMeta = f.dictionary())) {\r\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));\r\n        field = new Field(f.name()!, type, f.nullable(), decodeCustomMetadata(f));\r\n    }\r\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\r\n    // the data type and child fields, then wrap in a Dictionary type and insert the\r\n    // data type into the dictionary types map.\r\n    else if (!dictionaries.has(id = dictMeta.id().low)) {\r\n        // a dictionary index defaults to signed 32 bit int if unspecified\r\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\r\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));\r\n        dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\r\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\r\n    }\r\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\r\n    // data type and wrap in a new Dictionary type and field.\r\n    else {\r\n        // a dictionary index defaults to signed 32 bit int if unspecified\r\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\r\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta.isOrdered());\r\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\r\n    }\r\n    return field || null;\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeCustomMetadata(parent?: _Schema | _Field | null) {\r\n    const data = new Map<string, string>();\r\n    if (parent) {\r\n        for (let entry, key, i = -1, n = Math.trunc(parent.customMetadataLength()); ++i < n;) {\r\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\r\n                data.set(key, entry.value()!);\r\n            }\r\n        }\r\n    }\r\n    return data;\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeIndexType(_type: _Int) {\r\n    return new Int(_type.isSigned(), _type.bitWidth() as IntBitWidth);\r\n}\r\n\r\n/** @ignore */\r\nfunction decodeFieldType(f: _Field, children?: Field[]): DataType<any> {\r\n\r\n    const typeId = f.typeType();\r\n\r\n    switch (typeId) {\r\n        case Type['NONE']: return new Null();\r\n        case Type['Null']: return new Null();\r\n        case Type['Binary']: return new Binary();\r\n        case Type['Utf8']: return new Utf8();\r\n        case Type['Bool']: return new Bool();\r\n        case Type['List']: return new List((children || [])[0]);\r\n        case Type['Struct_']: return new Struct(children || []);\r\n    }\r\n\r\n    switch (typeId) {\r\n        case Type['Int']: {\r\n            const t = f.type(new _Int())!;\r\n            return new Int(t.isSigned(), t.bitWidth());\r\n        }\r\n        case Type['FloatingPoint']: {\r\n            const t = f.type(new _FloatingPoint())!;\r\n            return new Float(t.precision());\r\n        }\r\n        case Type['Decimal']: {\r\n            const t = f.type(new _Decimal())!;\r\n            return new Decimal(t.scale(), t.precision(), t.bitWidth());\r\n        }\r\n        case Type['Date']: {\r\n            const t = f.type(new _Date())!;\r\n            return new Date_(t.unit());\r\n        }\r\n        case Type['Time']: {\r\n            const t = f.type(new _Time())!;\r\n            return new Time(t.unit(), t.bitWidth() as TimeBitWidth);\r\n        }\r\n        case Type['Timestamp']: {\r\n            const t = f.type(new _Timestamp())!;\r\n            return new Timestamp(t.unit(), t.timezone());\r\n        }\r\n        case Type['Interval']: {\r\n            const t = f.type(new _Interval())!;\r\n            return new Interval(t.unit());\r\n        }\r\n        case Type['Union']: {\r\n            const t = f.type(new _Union())!;\r\n            return new Union(t.mode(), t.typeIdsArray() || [], children || []);\r\n        }\r\n        case Type['FixedSizeBinary']: {\r\n            const t = f.type(new _FixedSizeBinary())!;\r\n            return new FixedSizeBinary(t.byteWidth());\r\n        }\r\n        case Type['FixedSizeList']: {\r\n            const t = f.type(new _FixedSizeList())!;\r\n            return new FixedSizeList(t.listSize(), (children || [])[0]);\r\n        }\r\n        case Type['Map']: {\r\n            const t = f.type(new _Map())!;\r\n            return new Map_((children || [])[0], t.keysSorted());\r\n        }\r\n    }\r\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\r\n}\r\n\r\n/** @ignore */\r\nfunction encodeSchema(b: Builder, schema: Schema) {\r\n\r\n    const fieldOffsets = schema.fields.map((f) => Field.encode(b, f));\r\n\r\n    _Schema.startFieldsVector(b, fieldOffsets.length);\r\n\r\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\r\n\r\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\r\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\r\n            const key = b.createString(`${k}`);\r\n            const val = b.createString(`${v}`);\r\n            _KeyValue.startKeyValue(b);\r\n            _KeyValue.addKey(b, key);\r\n            _KeyValue.addValue(b, val);\r\n            return _KeyValue.endKeyValue(b);\r\n        }));\r\n\r\n    _Schema.startSchema(b);\r\n    _Schema.addFields(b, fieldsVectorOffset);\r\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\r\n\r\n    if (metadataOffset !== -1) { _Schema.addCustomMetadata(b, metadataOffset); }\r\n\r\n    return _Schema.endSchema(b);\r\n}\r\n\r\n/** @ignore */\r\nfunction encodeField(b: Builder, field: Field) {\r\n\r\n    let nameOffset = -1;\r\n    let typeOffset = -1;\r\n    let dictionaryOffset = -1;\r\n\r\n    const type = field.type;\r\n    let typeId: Type = <any>field.typeId;\r\n\r\n    if (!DataType.isDictionary(type)) {\r\n        typeOffset = typeAssembler.visit(type, b)!;\r\n    } else {\r\n        typeId = type.dictionary.typeId;\r\n        dictionaryOffset = typeAssembler.visit(type, b)!;\r\n        typeOffset = typeAssembler.visit(type.dictionary, b)!;\r\n    }\r\n\r\n    const childOffsets = (type.children || []).map((f: Field) => Field.encode(b, f));\r\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\r\n\r\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\r\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\r\n            const key = b.createString(`${k}`);\r\n            const val = b.createString(`${v}`);\r\n            _KeyValue.startKeyValue(b);\r\n            _KeyValue.addKey(b, key);\r\n            _KeyValue.addValue(b, val);\r\n            return _KeyValue.endKeyValue(b);\r\n        }));\r\n\r\n    if (field.name) {\r\n        nameOffset = b.createString(field.name);\r\n    }\r\n\r\n    _Field.startField(b);\r\n    _Field.addType(b, typeOffset);\r\n    _Field.addTypeType(b, typeId);\r\n    _Field.addChildren(b, childrenVectorOffset);\r\n    _Field.addNullable(b, !!field.nullable);\r\n\r\n    if (nameOffset !== -1) { _Field.addName(b, nameOffset); }\r\n    if (dictionaryOffset !== -1) { _Field.addDictionary(b, dictionaryOffset); }\r\n    if (metadataOffset !== -1) { _Field.addCustomMetadata(b, metadataOffset); }\r\n\r\n    return _Field.endField(b);\r\n}\r\n\r\n/** @ignore */\r\nfunction encodeRecordBatch(b: Builder, recordBatch: RecordBatch) {\r\n\r\n    const nodes = recordBatch.nodes || [];\r\n    const buffers = recordBatch.buffers || [];\r\n\r\n    _RecordBatch.startNodesVector(b, nodes.length);\r\n    for (const n of nodes.slice().reverse()) FieldNode.encode(b, n);\r\n\r\n    const nodesVectorOffset = b.endVector();\r\n\r\n    _RecordBatch.startBuffersVector(b, buffers.length);\r\n    for (const b_ of buffers.slice().reverse()) BufferRegion.encode(b, b_);\r\n\r\n    const buffersVectorOffset = b.endVector();\r\n\r\n    _RecordBatch.startRecordBatch(b);\r\n    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\r\n    _RecordBatch.addNodes(b, nodesVectorOffset);\r\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\r\n    return _RecordBatch.endRecordBatch(b);\r\n}\r\n\r\n/** @ignore */\r\nfunction encodeDictionaryBatch(b: Builder, dictionaryBatch: DictionaryBatch) {\r\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\r\n    _DictionaryBatch.startDictionaryBatch(b);\r\n    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\r\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\r\n    _DictionaryBatch.addData(b, dataOffset);\r\n    return _DictionaryBatch.endDictionaryBatch(b);\r\n}\r\n\r\n/** @ignore */\r\nfunction encodeFieldNode(b: Builder, node: FieldNode) {\r\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\r\n}\r\n\r\n/** @ignore */\r\nfunction encodeBufferRegion(b: Builder, node: BufferRegion) {\r\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\r\n}\r\n\r\n/** @ignore */\r\nconst platformIsLittleEndian = (() => {\r\n    const buffer = new ArrayBuffer(2);\r\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\r\n    // Int16Array uses the platform's endianness.\r\n    return new Int16Array(buffer)[0] === 256;\r\n})();\r\n\r\n/** @ignore */\r\ntype MessageHeaderDecoder = <T extends MessageHeader>() => T extends MessageHeader.Schema ? Schema\r\n    : T extends MessageHeader.RecordBatch ? RecordBatch\r\n    : T extends MessageHeader.DictionaryBatch ? DictionaryBatch : never;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}