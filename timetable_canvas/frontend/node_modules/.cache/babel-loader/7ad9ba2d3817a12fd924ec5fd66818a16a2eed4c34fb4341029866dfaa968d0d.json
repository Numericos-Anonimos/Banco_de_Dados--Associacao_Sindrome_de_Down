{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Field } from '../schema.mjs';\nimport { Map_ } from '../type.mjs';\nimport { VariableWidthBuilder } from '../builder.mjs';\n/** @ignore */\nexport class MapBuilder extends VariableWidthBuilder {\n  set(index, value) {\n    return super.set(index, value);\n  }\n  setValue(index, value) {\n    const row = value instanceof Map ? value : new Map(Object.entries(value));\n    const pending = this._pending || (this._pending = new Map());\n    const current = pending.get(index);\n    current && (this._pendingLength -= current.size);\n    this._pendingLength += row.size;\n    pending.set(index, row);\n  }\n  addChild(child) {\n    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\".concat(this.numChildren);\n    if (this.numChildren > 0) {\n      throw new Error('ListBuilder can only have one child.');\n    }\n    this.children[this.numChildren] = child;\n    this.type = new Map_(new Field(name, child.type, true), this.type.keysSorted);\n    return this.numChildren - 1;\n  }\n  _flushPending(pending) {\n    const offsets = this._offsets;\n    const [child] = this.children;\n    for (const [index, value] of pending) {\n      if (value === undefined) {\n        offsets.set(index, 0);\n      } else {\n        let {\n          [index]: idx,\n          [index + 1]: end\n        } = offsets.set(index, value.size).buffer;\n        for (const val of value.entries()) {\n          child.set(idx, val);\n          if (++idx >= end) break;\n        }\n      }\n    }\n  }\n}","map":{"version":3,"names":["Field","Map_","VariableWidthBuilder","MapBuilder","set","index","value","setValue","row","Map","Object","entries","pending","_pending","current","get","_pendingLength","size","addChild","child","name","arguments","length","undefined","concat","numChildren","Error","children","type","keysSorted","_flushPending","offsets","_offsets","idx","end","buffer","val"],"sources":["C:\\Users\\emclulo\\Downloads\\GitHub\\Banco_de_Dados--Associacao_Sindrome_de_Down\\timetable_canvas\\frontend\\node_modules\\apache-arrow\\src\\builder\\map.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Field } from '../schema.js';\r\nimport { DataType, Map_, Struct } from '../type.js';\r\nimport { Builder, VariableWidthBuilder } from '../builder.js';\r\n\r\n/** @ignore */ type MapValue<K extends DataType = any, V extends DataType = any> = Map_<K, V>['TValue'];\r\n/** @ignore */ type MapValues<K extends DataType = any, V extends DataType = any> = Map<number, MapValue<K, V> | undefined>;\r\n/** @ignore */ type MapValueExt<K extends DataType = any, V extends DataType = any> = MapValue<K, V> | { [key: string]: V } | { [key: number]: V };\r\n\r\n/** @ignore */\r\nexport class MapBuilder<K extends DataType = any, V extends DataType = any, TNull = any> extends VariableWidthBuilder<Map_<K, V>, TNull> {\r\n\r\n    declare protected _pending: MapValues<K, V> | undefined;\r\n    public set(index: number, value: MapValueExt<K, V> | TNull) {\r\n        return super.set(index, value as MapValue<K, V> | TNull);\r\n    }\r\n\r\n    public setValue(index: number, value: MapValueExt<K, V>) {\r\n        const row = (value instanceof Map ? value : new Map(Object.entries(value))) as MapValue<K, V>;\r\n        const pending = this._pending || (this._pending = new Map() as MapValues<K, V>);\r\n        const current = pending.get(index) as Map<K, V> | undefined;\r\n        current && (this._pendingLength -= current.size);\r\n        this._pendingLength += row.size;\r\n        pending.set(index, row);\r\n    }\r\n\r\n    public addChild(child: Builder<Struct<{ key: K; value: V }>>, name = `${this.numChildren}`) {\r\n        if (this.numChildren > 0) {\r\n            throw new Error('ListBuilder can only have one child.');\r\n        }\r\n        this.children[this.numChildren] = child;\r\n        this.type = new Map_<K, V>(new Field(name, child.type, true), this.type.keysSorted);\r\n        return this.numChildren - 1;\r\n    }\r\n\r\n    protected _flushPending(pending: MapValues<K, V>) {\r\n        const offsets = this._offsets;\r\n        const [child] = this.children;\r\n        for (const [index, value] of pending) {\r\n            if (value === undefined) {\r\n                offsets.set(index, 0);\r\n            } else {\r\n                let {\r\n                    [index]: idx,\r\n                    [index + 1]: end\r\n                } = offsets.set(index, value.size).buffer;\r\n                for (const val of value.entries()) {\r\n                    child.set(idx, val);\r\n                    if (++idx >= end) break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,KAAK,QAAQ,eAAe;AACrC,SAAmBC,IAAI,QAAgB,aAAa;AACpD,SAAkBC,oBAAoB,QAAQ,gBAAgB;AAM9D;AACA,OAAM,MAAOC,UAA4E,SAAQD,oBAAuC;EAG7HE,GAAGA,CAACC,KAAa,EAAEC,KAAgC;IACtD,OAAO,KAAK,CAACF,GAAG,CAACC,KAAK,EAAEC,KAA+B,CAAC;EAC5D;EAEOC,QAAQA,CAACF,KAAa,EAAEC,KAAwB;IACnD,MAAME,GAAG,GAAIF,KAAK,YAAYG,GAAG,GAAGH,KAAK,GAAG,IAAIG,GAAG,CAACC,MAAM,CAACC,OAAO,CAACL,KAAK,CAAC,CAAoB;IAC7F,MAAMM,OAAO,GAAG,IAAI,CAACC,QAAQ,KAAK,IAAI,CAACA,QAAQ,GAAG,IAAIJ,GAAG,EAAqB,CAAC;IAC/E,MAAMK,OAAO,GAAGF,OAAO,CAACG,GAAG,CAACV,KAAK,CAA0B;IAC3DS,OAAO,KAAK,IAAI,CAACE,cAAc,IAAIF,OAAO,CAACG,IAAI,CAAC;IAChD,IAAI,CAACD,cAAc,IAAIR,GAAG,CAACS,IAAI;IAC/BL,OAAO,CAACR,GAAG,CAACC,KAAK,EAAEG,GAAG,CAAC;EAC3B;EAEOU,QAAQA,CAACC,KAA4C,EAA8B;IAAA,IAA5BC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,SAAAG,MAAA,CAAM,IAAI,CAACC,WAAW;IACpF,IAAI,IAAI,CAACA,WAAW,GAAG,CAAC,EAAE;MACtB,MAAM,IAAIC,KAAK,CAAC,sCAAsC,CAAC;;IAE3D,IAAI,CAACC,QAAQ,CAAC,IAAI,CAACF,WAAW,CAAC,GAAGN,KAAK;IACvC,IAAI,CAACS,IAAI,GAAG,IAAI3B,IAAI,CAAO,IAAID,KAAK,CAACoB,IAAI,EAAED,KAAK,CAACS,IAAI,EAAE,IAAI,CAAC,EAAE,IAAI,CAACA,IAAI,CAACC,UAAU,CAAC;IACnF,OAAO,IAAI,CAACJ,WAAW,GAAG,CAAC;EAC/B;EAEUK,aAAaA,CAAClB,OAAwB;IAC5C,MAAMmB,OAAO,GAAG,IAAI,CAACC,QAAQ;IAC7B,MAAM,CAACb,KAAK,CAAC,GAAG,IAAI,CAACQ,QAAQ;IAC7B,KAAK,MAAM,CAACtB,KAAK,EAAEC,KAAK,CAAC,IAAIM,OAAO,EAAE;MAClC,IAAIN,KAAK,KAAKiB,SAAS,EAAE;QACrBQ,OAAO,CAAC3B,GAAG,CAACC,KAAK,EAAE,CAAC,CAAC;OACxB,MAAM;QACH,IAAI;UACA,CAACA,KAAK,GAAG4B,GAAG;UACZ,CAAC5B,KAAK,GAAG,CAAC,GAAG6B;QAAG,CACnB,GAAGH,OAAO,CAAC3B,GAAG,CAACC,KAAK,EAAEC,KAAK,CAACW,IAAI,CAAC,CAACkB,MAAM;QACzC,KAAK,MAAMC,GAAG,IAAI9B,KAAK,CAACK,OAAO,EAAE,EAAE;UAC/BQ,KAAK,CAACf,GAAG,CAAC6B,GAAG,EAAEG,GAAG,CAAC;UACnB,IAAI,EAAEH,GAAG,IAAIC,GAAG,EAAE;;;;EAIlC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}