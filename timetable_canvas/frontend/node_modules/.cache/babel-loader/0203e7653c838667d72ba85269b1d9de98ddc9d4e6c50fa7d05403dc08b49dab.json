{"ast":null,"code":"// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { TimeUnit } from './time-unit.mjs';\n/**\r\n * Timestamp is a 64-bit signed integer representing an elapsed time since a\r\n * fixed epoch, stored in either of four units: seconds, milliseconds,\r\n * microseconds or nanoseconds, and is optionally annotated with a timezone.\r\n *\r\n * Timestamp values do not include any leap seconds (in other words, all\r\n * days are considered 86400 seconds long).\r\n *\r\n * Timestamps with a non-empty timezone\r\n * ------------------------------------\r\n *\r\n * If a Timestamp column has a non-empty timezone value, its epoch is\r\n * 1970-01-01 00:00:00 (January 1st 1970, midnight) in the *UTC* timezone\r\n * (the Unix epoch), regardless of the Timestamp's own timezone.\r\n *\r\n * Therefore, timestamp values with a non-empty timezone correspond to\r\n * physical points in time together with some additional information about\r\n * how the data was obtained and/or how to display it (the timezone).\r\n *\r\n *   For example, the timestamp value 0 with the timezone string \"Europe/Paris\"\r\n *   corresponds to \"January 1st 1970, 00h00\" in the UTC timezone, but the\r\n *   application may prefer to display it as \"January 1st 1970, 01h00\" in\r\n *   the Europe/Paris timezone (which is the same physical point in time).\r\n *\r\n * One consequence is that timestamp values with a non-empty timezone\r\n * can be compared and ordered directly, since they all share the same\r\n * well-known point of reference (the Unix epoch).\r\n *\r\n * Timestamps with an unset / empty timezone\r\n * -----------------------------------------\r\n *\r\n * If a Timestamp column has no timezone value, its epoch is\r\n * 1970-01-01 00:00:00 (January 1st 1970, midnight) in an *unknown* timezone.\r\n *\r\n * Therefore, timestamp values without a timezone cannot be meaningfully\r\n * interpreted as physical points in time, but only as calendar / clock\r\n * indications (\"wall clock time\") in an unspecified timezone.\r\n *\r\n *   For example, the timestamp value 0 with an empty timezone string\r\n *   corresponds to \"January 1st 1970, 00h00\" in an unknown timezone: there\r\n *   is not enough information to interpret it as a well-defined physical\r\n *   point in time.\r\n *\r\n * One consequence is that timestamp values without a timezone cannot\r\n * be reliably compared or ordered, since they may have different points of\r\n * reference.  In particular, it is *not* possible to interpret an unset\r\n * or empty timezone as the same as \"UTC\".\r\n *\r\n * Conversion between timezones\r\n * ----------------------------\r\n *\r\n * If a Timestamp column has a non-empty timezone, changing the timezone\r\n * to a different non-empty value is a metadata-only operation:\r\n * the timestamp values need not change as their point of reference remains\r\n * the same (the Unix epoch).\r\n *\r\n * However, if a Timestamp column has no timezone value, changing it to a\r\n * non-empty value requires to think about the desired semantics.\r\n * One possibility is to assume that the original timestamp values are\r\n * relative to the epoch of the timezone being set; timestamp values should\r\n * then adjusted to the Unix epoch (for example, changing the timezone from\r\n * empty to \"Europe/Paris\" would require converting the timestamp values\r\n * from \"Europe/Paris\" to \"UTC\", which seems counter-intuitive but is\r\n * nevertheless correct).\r\n *\r\n * Guidelines for encoding data from external libraries\r\n * ----------------------------------------------------\r\n *\r\n * Date & time libraries often have multiple different data types for temporal\r\n * data. In order to ease interoperability between different implementations the\r\n * Arrow project has some recommendations for encoding these types into a Timestamp\r\n * column.\r\n *\r\n * An \"instant\" represents a physical point in time that has no relevant timezone\r\n * (for example, astronomical data). To encode an instant, use a Timestamp with\r\n * the timezone string set to \"UTC\", and make sure the Timestamp values\r\n * are relative to the UTC epoch (January 1st 1970, midnight).\r\n *\r\n * A \"zoned date-time\" represents a physical point in time annotated with an\r\n * informative timezone (for example, the timezone in which the data was\r\n * recorded).  To encode a zoned date-time, use a Timestamp with the timezone\r\n * string set to the name of the timezone, and make sure the Timestamp values\r\n * are relative to the UTC epoch (January 1st 1970, midnight).\r\n *\r\n *  (There is some ambiguity between an instant and a zoned date-time with the\r\n *   UTC timezone.  Both of these are stored the same in Arrow.  Typically,\r\n *   this distinction does not matter.  If it does, then an application should\r\n *   use custom metadata or an extension type to distinguish between the two cases.)\r\n *\r\n * An \"offset date-time\" represents a physical point in time combined with an\r\n * explicit offset from UTC.  To encode an offset date-time, use a Timestamp\r\n * with the timezone string set to the numeric timezone offset string\r\n * (e.g. \"+03:00\"), and make sure the Timestamp values are relative to\r\n * the UTC epoch (January 1st 1970, midnight).\r\n *\r\n * A \"naive date-time\" (also called \"local date-time\" in some libraries)\r\n * represents a wall clock time combined with a calendar date, but with\r\n * no indication of how to map this information to a physical point in time.\r\n * Naive date-times must be handled with care because of this missing\r\n * information, and also because daylight saving time (DST) may make\r\n * some values ambiguous or non-existent. A naive date-time may be\r\n * stored as a struct with Date and Time fields. However, it may also be\r\n * encoded into a Timestamp column with an empty timezone. The timestamp\r\n * values should be computed \"as if\" the timezone of the date-time values\r\n * was UTC; for example, the naive date-time \"January 1st 1970, 00h00\" would\r\n * be encoded as timestamp value 0.\r\n */\nexport class Timestamp {\n  constructor() {\n    this.bb = null;\n    this.bb_pos = 0;\n  }\n  __init(i, bb) {\n    this.bb_pos = i;\n    this.bb = bb;\n    return this;\n  }\n  static getRootAsTimestamp(bb, obj) {\n    return (obj || new Timestamp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n  }\n  static getSizePrefixedRootAsTimestamp(bb, obj) {\n    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n    return (obj || new Timestamp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n  }\n  unit() {\n    const offset = this.bb.__offset(this.bb_pos, 4);\n    return offset ? this.bb.readInt16(this.bb_pos + offset) : TimeUnit.SECOND;\n  }\n  timezone(optionalEncoding) {\n    const offset = this.bb.__offset(this.bb_pos, 6);\n    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n  }\n  static startTimestamp(builder) {\n    builder.startObject(2);\n  }\n  static addUnit(builder, unit) {\n    builder.addFieldInt16(0, unit, TimeUnit.SECOND);\n  }\n  static addTimezone(builder, timezoneOffset) {\n    builder.addFieldOffset(1, timezoneOffset, 0);\n  }\n  static endTimestamp(builder) {\n    const offset = builder.endObject();\n    return offset;\n  }\n  static createTimestamp(builder, unit, timezoneOffset) {\n    Timestamp.startTimestamp(builder);\n    Timestamp.addUnit(builder, unit);\n    Timestamp.addTimezone(builder, timezoneOffset);\n    return Timestamp.endTimestamp(builder);\n  }\n}","map":{"version":3,"names":["flatbuffers","TimeUnit","Timestamp","constructor","bb","bb_pos","__init","i","getRootAsTimestamp","obj","readInt32","position","getSizePrefixedRootAsTimestamp","setPosition","SIZE_PREFIX_LENGTH","unit","offset","__offset","readInt16","SECOND","timezone","optionalEncoding","__string","startTimestamp","builder","startObject","addUnit","addFieldInt16","addTimezone","timezoneOffset","addFieldOffset","endTimestamp","endObject","createTimestamp"],"sources":["C:\\Users\\emclulo\\Downloads\\GitHub\\Banco_de_Dados--Associacao_Sindrome_de_Down\\timetable_canvas\\frontend\\node_modules\\apache-arrow\\src\\fb\\timestamp.ts"],"sourcesContent":["// automatically generated by the FlatBuffers compiler, do not modify\r\n\r\nimport * as flatbuffers from 'flatbuffers';\r\n\r\nimport { TimeUnit } from './time-unit.js';\r\n\r\n\r\n/**\r\n * Timestamp is a 64-bit signed integer representing an elapsed time since a\r\n * fixed epoch, stored in either of four units: seconds, milliseconds,\r\n * microseconds or nanoseconds, and is optionally annotated with a timezone.\r\n *\r\n * Timestamp values do not include any leap seconds (in other words, all\r\n * days are considered 86400 seconds long).\r\n *\r\n * Timestamps with a non-empty timezone\r\n * ------------------------------------\r\n *\r\n * If a Timestamp column has a non-empty timezone value, its epoch is\r\n * 1970-01-01 00:00:00 (January 1st 1970, midnight) in the *UTC* timezone\r\n * (the Unix epoch), regardless of the Timestamp's own timezone.\r\n *\r\n * Therefore, timestamp values with a non-empty timezone correspond to\r\n * physical points in time together with some additional information about\r\n * how the data was obtained and/or how to display it (the timezone).\r\n *\r\n *   For example, the timestamp value 0 with the timezone string \"Europe/Paris\"\r\n *   corresponds to \"January 1st 1970, 00h00\" in the UTC timezone, but the\r\n *   application may prefer to display it as \"January 1st 1970, 01h00\" in\r\n *   the Europe/Paris timezone (which is the same physical point in time).\r\n *\r\n * One consequence is that timestamp values with a non-empty timezone\r\n * can be compared and ordered directly, since they all share the same\r\n * well-known point of reference (the Unix epoch).\r\n *\r\n * Timestamps with an unset / empty timezone\r\n * -----------------------------------------\r\n *\r\n * If a Timestamp column has no timezone value, its epoch is\r\n * 1970-01-01 00:00:00 (January 1st 1970, midnight) in an *unknown* timezone.\r\n *\r\n * Therefore, timestamp values without a timezone cannot be meaningfully\r\n * interpreted as physical points in time, but only as calendar / clock\r\n * indications (\"wall clock time\") in an unspecified timezone.\r\n *\r\n *   For example, the timestamp value 0 with an empty timezone string\r\n *   corresponds to \"January 1st 1970, 00h00\" in an unknown timezone: there\r\n *   is not enough information to interpret it as a well-defined physical\r\n *   point in time.\r\n *\r\n * One consequence is that timestamp values without a timezone cannot\r\n * be reliably compared or ordered, since they may have different points of\r\n * reference.  In particular, it is *not* possible to interpret an unset\r\n * or empty timezone as the same as \"UTC\".\r\n *\r\n * Conversion between timezones\r\n * ----------------------------\r\n *\r\n * If a Timestamp column has a non-empty timezone, changing the timezone\r\n * to a different non-empty value is a metadata-only operation:\r\n * the timestamp values need not change as their point of reference remains\r\n * the same (the Unix epoch).\r\n *\r\n * However, if a Timestamp column has no timezone value, changing it to a\r\n * non-empty value requires to think about the desired semantics.\r\n * One possibility is to assume that the original timestamp values are\r\n * relative to the epoch of the timezone being set; timestamp values should\r\n * then adjusted to the Unix epoch (for example, changing the timezone from\r\n * empty to \"Europe/Paris\" would require converting the timestamp values\r\n * from \"Europe/Paris\" to \"UTC\", which seems counter-intuitive but is\r\n * nevertheless correct).\r\n *\r\n * Guidelines for encoding data from external libraries\r\n * ----------------------------------------------------\r\n *\r\n * Date & time libraries often have multiple different data types for temporal\r\n * data. In order to ease interoperability between different implementations the\r\n * Arrow project has some recommendations for encoding these types into a Timestamp\r\n * column.\r\n *\r\n * An \"instant\" represents a physical point in time that has no relevant timezone\r\n * (for example, astronomical data). To encode an instant, use a Timestamp with\r\n * the timezone string set to \"UTC\", and make sure the Timestamp values\r\n * are relative to the UTC epoch (January 1st 1970, midnight).\r\n *\r\n * A \"zoned date-time\" represents a physical point in time annotated with an\r\n * informative timezone (for example, the timezone in which the data was\r\n * recorded).  To encode a zoned date-time, use a Timestamp with the timezone\r\n * string set to the name of the timezone, and make sure the Timestamp values\r\n * are relative to the UTC epoch (January 1st 1970, midnight).\r\n *\r\n *  (There is some ambiguity between an instant and a zoned date-time with the\r\n *   UTC timezone.  Both of these are stored the same in Arrow.  Typically,\r\n *   this distinction does not matter.  If it does, then an application should\r\n *   use custom metadata or an extension type to distinguish between the two cases.)\r\n *\r\n * An \"offset date-time\" represents a physical point in time combined with an\r\n * explicit offset from UTC.  To encode an offset date-time, use a Timestamp\r\n * with the timezone string set to the numeric timezone offset string\r\n * (e.g. \"+03:00\"), and make sure the Timestamp values are relative to\r\n * the UTC epoch (January 1st 1970, midnight).\r\n *\r\n * A \"naive date-time\" (also called \"local date-time\" in some libraries)\r\n * represents a wall clock time combined with a calendar date, but with\r\n * no indication of how to map this information to a physical point in time.\r\n * Naive date-times must be handled with care because of this missing\r\n * information, and also because daylight saving time (DST) may make\r\n * some values ambiguous or non-existent. A naive date-time may be\r\n * stored as a struct with Date and Time fields. However, it may also be\r\n * encoded into a Timestamp column with an empty timezone. The timestamp\r\n * values should be computed \"as if\" the timezone of the date-time values\r\n * was UTC; for example, the naive date-time \"January 1st 1970, 00h00\" would\r\n * be encoded as timestamp value 0.\r\n */\r\nexport class Timestamp {\r\n  bb: flatbuffers.ByteBuffer|null = null;\r\n  bb_pos = 0;\r\n__init(i:number, bb:flatbuffers.ByteBuffer):Timestamp {\r\n  this.bb_pos = i;\r\n  this.bb = bb;\r\n  return this;\r\n}\r\n\r\nstatic getRootAsTimestamp(bb:flatbuffers.ByteBuffer, obj?:Timestamp):Timestamp {\r\n  return (obj || new Timestamp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n}\r\n\r\nstatic getSizePrefixedRootAsTimestamp(bb:flatbuffers.ByteBuffer, obj?:Timestamp):Timestamp {\r\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n  return (obj || new Timestamp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n}\r\n\r\nunit():TimeUnit {\r\n  const offset = this.bb!.__offset(this.bb_pos, 4);\r\n  return offset ? this.bb!.readInt16(this.bb_pos + offset) : TimeUnit.SECOND;\r\n}\r\n\r\n/**\r\n * The timezone is an optional string indicating the name of a timezone,\r\n * one of:\r\n *\r\n * * As used in the Olson timezone database (the \"tz database\" or\r\n *   \"tzdata\"), such as \"America/New_York\".\r\n * * An absolute timezone offset of the form \"+XX:XX\" or \"-XX:XX\",\r\n *   such as \"+07:30\".\r\n *\r\n * Whether a timezone string is present indicates different semantics about\r\n * the data (see above).\r\n */\r\ntimezone():string|null\r\ntimezone(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null\r\ntimezone(optionalEncoding?:any):string|Uint8Array|null {\r\n  const offset = this.bb!.__offset(this.bb_pos, 6);\r\n  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n}\r\n\r\nstatic startTimestamp(builder:flatbuffers.Builder) {\r\n  builder.startObject(2);\r\n}\r\n\r\nstatic addUnit(builder:flatbuffers.Builder, unit:TimeUnit) {\r\n  builder.addFieldInt16(0, unit, TimeUnit.SECOND);\r\n}\r\n\r\nstatic addTimezone(builder:flatbuffers.Builder, timezoneOffset:flatbuffers.Offset) {\r\n  builder.addFieldOffset(1, timezoneOffset, 0);\r\n}\r\n\r\nstatic endTimestamp(builder:flatbuffers.Builder):flatbuffers.Offset {\r\n  const offset = builder.endObject();\r\n  return offset;\r\n}\r\n\r\nstatic createTimestamp(builder:flatbuffers.Builder, unit:TimeUnit, timezoneOffset:flatbuffers.Offset):flatbuffers.Offset {\r\n  Timestamp.startTimestamp(builder);\r\n  Timestamp.addUnit(builder, unit);\r\n  Timestamp.addTimezone(builder, timezoneOffset);\r\n  return Timestamp.endTimestamp(builder);\r\n}\r\n}\r\n"],"mappings":"AAAA;AAEA,OAAO,KAAKA,WAAW,MAAM,aAAa;AAE1C,SAASC,QAAQ,QAAQ,iBAAiB;AAG1C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2GA,OAAM,MAAOC,SAAS;EAAtBC,YAAA;IACE,KAAAC,EAAE,GAAgC,IAAI;IACtC,KAAAC,MAAM,GAAG,CAAC;EA+DZ;EA9DAC,MAAMA,CAACC,CAAQ,EAAEH,EAAyB;IACxC,IAAI,CAACC,MAAM,GAAGE,CAAC;IACf,IAAI,CAACH,EAAE,GAAGA,EAAE;IACZ,OAAO,IAAI;EACb;EAEA,OAAOI,kBAAkBA,CAACJ,EAAyB,EAAEK,GAAc;IACjE,OAAO,CAACA,GAAG,IAAI,IAAIP,SAAS,EAAE,EAAEI,MAAM,CAACF,EAAE,CAACM,SAAS,CAACN,EAAE,CAACO,QAAQ,EAAE,CAAC,GAAGP,EAAE,CAACO,QAAQ,EAAE,EAAEP,EAAE,CAAC;EACzF;EAEA,OAAOQ,8BAA8BA,CAACR,EAAyB,EAAEK,GAAc;IAC7EL,EAAE,CAACS,WAAW,CAACT,EAAE,CAACO,QAAQ,EAAE,GAAGX,WAAW,CAACc,kBAAkB,CAAC;IAC9D,OAAO,CAACL,GAAG,IAAI,IAAIP,SAAS,EAAE,EAAEI,MAAM,CAACF,EAAE,CAACM,SAAS,CAACN,EAAE,CAACO,QAAQ,EAAE,CAAC,GAAGP,EAAE,CAACO,QAAQ,EAAE,EAAEP,EAAE,CAAC;EACzF;EAEAW,IAAIA,CAAA;IACF,MAAMC,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACa,QAAQ,CAAC,IAAI,CAACZ,MAAM,EAAE,CAAC,CAAC;IAChD,OAAOW,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACc,SAAS,CAAC,IAAI,CAACb,MAAM,GAAGW,MAAM,CAAC,GAAGf,QAAQ,CAACkB,MAAM;EAC5E;EAgBAC,QAAQA,CAACC,gBAAqB;IAC5B,MAAML,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACa,QAAQ,CAAC,IAAI,CAACZ,MAAM,EAAE,CAAC,CAAC;IAChD,OAAOW,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACkB,QAAQ,CAAC,IAAI,CAACjB,MAAM,GAAGW,MAAM,EAAEK,gBAAgB,CAAC,GAAG,IAAI;EAClF;EAEA,OAAOE,cAAcA,CAACC,OAA2B;IAC/CA,OAAO,CAACC,WAAW,CAAC,CAAC,CAAC;EACxB;EAEA,OAAOC,OAAOA,CAACF,OAA2B,EAAET,IAAa;IACvDS,OAAO,CAACG,aAAa,CAAC,CAAC,EAAEZ,IAAI,EAAEd,QAAQ,CAACkB,MAAM,CAAC;EACjD;EAEA,OAAOS,WAAWA,CAACJ,OAA2B,EAAEK,cAAiC;IAC/EL,OAAO,CAACM,cAAc,CAAC,CAAC,EAAED,cAAc,EAAE,CAAC,CAAC;EAC9C;EAEA,OAAOE,YAAYA,CAACP,OAA2B;IAC7C,MAAMR,MAAM,GAAGQ,OAAO,CAACQ,SAAS,EAAE;IAClC,OAAOhB,MAAM;EACf;EAEA,OAAOiB,eAAeA,CAACT,OAA2B,EAAET,IAAa,EAAEc,cAAiC;IAClG3B,SAAS,CAACqB,cAAc,CAACC,OAAO,CAAC;IACjCtB,SAAS,CAACwB,OAAO,CAACF,OAAO,EAAET,IAAI,CAAC;IAChCb,SAAS,CAAC0B,WAAW,CAACJ,OAAO,EAAEK,cAAc,CAAC;IAC9C,OAAO3B,SAAS,CAAC6B,YAAY,CAACP,OAAO,CAAC;EACxC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}