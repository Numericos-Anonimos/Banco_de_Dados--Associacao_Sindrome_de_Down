{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BN } from '../util/bn.mjs';\nimport { Vector } from '../vector.mjs';\nimport { Visitor } from '../visitor.mjs';\nimport { MapRow } from '../row/map.mjs';\nimport { StructRow } from '../row/struct.mjs';\nimport { decodeUtf8 } from '../util/utf8.mjs';\nimport { uint16ToFloat64 } from '../util/math.mjs';\nimport { UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum.mjs';\n/** @ignore */\nexport class GetVisitor extends Visitor {}\n/** @ignore */\nfunction wrapGet(fn) {\n  return (data, _1) => data.getValid(_1) ? fn(data, _1) : null;\n}\n/** @ignore */\nconst epochDaysToMs = (data, index) => 86400000 * data[index];\n/** @ignore */\nconst epochMillisecondsLongToMs = (data, index) => 4294967296 * data[index + 1] + (data[index] >>> 0);\n/** @ignore */\nconst epochMicrosecondsLongToMs = (data, index) => 4294967296 * (data[index + 1] / 1000) + (data[index] >>> 0) / 1000;\n/** @ignore */\nconst epochNanosecondsLongToMs = (data, index) => 4294967296 * (data[index + 1] / 1000000) + (data[index] >>> 0) / 1000000;\n/** @ignore */\nconst epochMillisecondsToDate = epochMs => new Date(epochMs);\n/** @ignore */\nconst epochDaysToDate = (data, index) => epochMillisecondsToDate(epochDaysToMs(data, index));\n/** @ignore */\nconst epochMillisecondsLongToDate = (data, index) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n/** @ignore */\nconst getNull = (_data, _index) => null;\n/** @ignore */\nconst getVariableWidthBytes = (values, valueOffsets, index) => {\n  if (index + 1 >= valueOffsets.length) {\n    return null;\n  }\n  const x = valueOffsets[index];\n  const y = valueOffsets[index + 1];\n  return values.subarray(x, y);\n};\n/** @ignore */\nconst getBool = (_ref, index) => {\n  let {\n    offset,\n    values\n  } = _ref;\n  const idx = offset + index;\n  const byte = values[idx >> 3];\n  return (byte & 1 << idx % 8) !== 0;\n};\n/** @ignore */\nconst getDateDay = (_ref2, index) => {\n  let {\n    values\n  } = _ref2;\n  return epochDaysToDate(values, index);\n};\n/** @ignore */\nconst getDateMillisecond = (_ref3, index) => {\n  let {\n    values\n  } = _ref3;\n  return epochMillisecondsLongToDate(values, index * 2);\n};\n/** @ignore */\nconst getNumeric = (_ref4, index) => {\n  let {\n    stride,\n    values\n  } = _ref4;\n  return values[stride * index];\n};\n/** @ignore */\nconst getFloat16 = (_ref5, index) => {\n  let {\n    stride,\n    values\n  } = _ref5;\n  return uint16ToFloat64(values[stride * index]);\n};\n/** @ignore */\nconst getBigInts = (_ref6, index) => {\n  let {\n    values\n  } = _ref6;\n  return values[index];\n};\n/** @ignore */\nconst getFixedSizeBinary = (_ref7, index) => {\n  let {\n    stride,\n    values\n  } = _ref7;\n  return values.subarray(stride * index, stride * (index + 1));\n};\n/** @ignore */\nconst getBinary = (_ref8, index) => {\n  let {\n    values,\n    valueOffsets\n  } = _ref8;\n  return getVariableWidthBytes(values, valueOffsets, index);\n};\n/** @ignore */\nconst getUtf8 = (_ref9, index) => {\n  let {\n    values,\n    valueOffsets\n  } = _ref9;\n  const bytes = getVariableWidthBytes(values, valueOffsets, index);\n  return bytes !== null ? decodeUtf8(bytes) : null;\n};\n/* istanbul ignore next */\n/** @ignore */\nconst getInt = (_ref10, index) => {\n  let {\n    values\n  } = _ref10;\n  return values[index];\n};\n/* istanbul ignore next */\n/** @ignore */\nconst getFloat = (_ref11, index) => {\n  let {\n    type,\n    values\n  } = _ref11;\n  return type.precision !== Precision.HALF ? values[index] : uint16ToFloat64(values[index]);\n};\n/* istanbul ignore next */\n/** @ignore */\nconst getDate = (data, index) => data.type.unit === DateUnit.DAY ? getDateDay(data, index) : getDateMillisecond(data, index);\n/** @ignore */\nconst getTimestampSecond = (_ref12, index) => {\n  let {\n    values\n  } = _ref12;\n  return 1000 * epochMillisecondsLongToMs(values, index * 2);\n};\n/** @ignore */\nconst getTimestampMillisecond = (_ref13, index) => {\n  let {\n    values\n  } = _ref13;\n  return epochMillisecondsLongToMs(values, index * 2);\n};\n/** @ignore */\nconst getTimestampMicrosecond = (_ref14, index) => {\n  let {\n    values\n  } = _ref14;\n  return epochMicrosecondsLongToMs(values, index * 2);\n};\n/** @ignore */\nconst getTimestampNanosecond = (_ref15, index) => {\n  let {\n    values\n  } = _ref15;\n  return epochNanosecondsLongToMs(values, index * 2);\n};\n/* istanbul ignore next */\n/** @ignore */\nconst getTimestamp = (data, index) => {\n  switch (data.type.unit) {\n    case TimeUnit.SECOND:\n      return getTimestampSecond(data, index);\n    case TimeUnit.MILLISECOND:\n      return getTimestampMillisecond(data, index);\n    case TimeUnit.MICROSECOND:\n      return getTimestampMicrosecond(data, index);\n    case TimeUnit.NANOSECOND:\n      return getTimestampNanosecond(data, index);\n  }\n};\n/** @ignore */\nconst getTimeSecond = (_ref16, index) => {\n  let {\n    values\n  } = _ref16;\n  return values[index];\n};\n/** @ignore */\nconst getTimeMillisecond = (_ref17, index) => {\n  let {\n    values\n  } = _ref17;\n  return values[index];\n};\n/** @ignore */\nconst getTimeMicrosecond = (_ref18, index) => {\n  let {\n    values\n  } = _ref18;\n  return values[index];\n};\n/** @ignore */\nconst getTimeNanosecond = (_ref19, index) => {\n  let {\n    values\n  } = _ref19;\n  return values[index];\n};\n/* istanbul ignore next */\n/** @ignore */\nconst getTime = (data, index) => {\n  switch (data.type.unit) {\n    case TimeUnit.SECOND:\n      return getTimeSecond(data, index);\n    case TimeUnit.MILLISECOND:\n      return getTimeMillisecond(data, index);\n    case TimeUnit.MICROSECOND:\n      return getTimeMicrosecond(data, index);\n    case TimeUnit.NANOSECOND:\n      return getTimeNanosecond(data, index);\n  }\n};\n/** @ignore */\nconst getDecimal = (_ref20, index) => {\n  let {\n    values,\n    stride\n  } = _ref20;\n  return BN.decimal(values.subarray(stride * index, stride * (index + 1)));\n};\n/** @ignore */\nconst getList = (data, index) => {\n  const {\n    valueOffsets,\n    stride,\n    children\n  } = data;\n  const {\n    [index * stride]: begin,\n    [index * stride + 1]: end\n  } = valueOffsets;\n  const child = children[0];\n  const slice = child.slice(begin, end - begin);\n  return new Vector([slice]);\n};\n/** @ignore */\nconst getMap = (data, index) => {\n  const {\n    valueOffsets,\n    children\n  } = data;\n  const {\n    [index]: begin,\n    [index + 1]: end\n  } = valueOffsets;\n  const child = children[0];\n  return new MapRow(child.slice(begin, end - begin));\n};\n/** @ignore */\nconst getStruct = (data, index) => {\n  return new StructRow(data, index);\n};\n/* istanbul ignore next */\n/** @ignore */\nconst getUnion = (data, index) => {\n  return data.type.mode === UnionMode.Dense ? getDenseUnion(data, index) : getSparseUnion(data, index);\n};\n/** @ignore */\nconst getDenseUnion = (data, index) => {\n  const childIndex = data.type.typeIdToChildIndex[data.typeIds[index]];\n  const child = data.children[childIndex];\n  return instance.visit(child, data.valueOffsets[index]);\n};\n/** @ignore */\nconst getSparseUnion = (data, index) => {\n  const childIndex = data.type.typeIdToChildIndex[data.typeIds[index]];\n  const child = data.children[childIndex];\n  return instance.visit(child, index);\n};\n/** @ignore */\nconst getDictionary = (data, index) => {\n  var _a;\n  return (_a = data.dictionary) === null || _a === void 0 ? void 0 : _a.get(data.values[index]);\n};\n/* istanbul ignore next */\n/** @ignore */\nconst getInterval = (data, index) => data.type.unit === IntervalUnit.DAY_TIME ? getIntervalDayTime(data, index) : getIntervalYearMonth(data, index);\n/** @ignore */\nconst getIntervalDayTime = (_ref21, index) => {\n  let {\n    values\n  } = _ref21;\n  return values.subarray(2 * index, 2 * (index + 1));\n};\n/** @ignore */\nconst getIntervalYearMonth = (_ref22, index) => {\n  let {\n    values\n  } = _ref22;\n  const interval = values[index];\n  const int32s = new Int32Array(2);\n  int32s[0] = Math.trunc(interval / 12); /* years */\n  int32s[1] = Math.trunc(interval % 12); /* months */\n  return int32s;\n};\n/** @ignore */\nconst getFixedSizeList = (data, index) => {\n  const {\n    stride,\n    children\n  } = data;\n  const child = children[0];\n  const slice = child.slice(index * stride, stride);\n  return new Vector([slice]);\n};\nGetVisitor.prototype.visitNull = wrapGet(getNull);\nGetVisitor.prototype.visitBool = wrapGet(getBool);\nGetVisitor.prototype.visitInt = wrapGet(getInt);\nGetVisitor.prototype.visitInt8 = wrapGet(getNumeric);\nGetVisitor.prototype.visitInt16 = wrapGet(getNumeric);\nGetVisitor.prototype.visitInt32 = wrapGet(getNumeric);\nGetVisitor.prototype.visitInt64 = wrapGet(getBigInts);\nGetVisitor.prototype.visitUint8 = wrapGet(getNumeric);\nGetVisitor.prototype.visitUint16 = wrapGet(getNumeric);\nGetVisitor.prototype.visitUint32 = wrapGet(getNumeric);\nGetVisitor.prototype.visitUint64 = wrapGet(getBigInts);\nGetVisitor.prototype.visitFloat = wrapGet(getFloat);\nGetVisitor.prototype.visitFloat16 = wrapGet(getFloat16);\nGetVisitor.prototype.visitFloat32 = wrapGet(getNumeric);\nGetVisitor.prototype.visitFloat64 = wrapGet(getNumeric);\nGetVisitor.prototype.visitUtf8 = wrapGet(getUtf8);\nGetVisitor.prototype.visitBinary = wrapGet(getBinary);\nGetVisitor.prototype.visitFixedSizeBinary = wrapGet(getFixedSizeBinary);\nGetVisitor.prototype.visitDate = wrapGet(getDate);\nGetVisitor.prototype.visitDateDay = wrapGet(getDateDay);\nGetVisitor.prototype.visitDateMillisecond = wrapGet(getDateMillisecond);\nGetVisitor.prototype.visitTimestamp = wrapGet(getTimestamp);\nGetVisitor.prototype.visitTimestampSecond = wrapGet(getTimestampSecond);\nGetVisitor.prototype.visitTimestampMillisecond = wrapGet(getTimestampMillisecond);\nGetVisitor.prototype.visitTimestampMicrosecond = wrapGet(getTimestampMicrosecond);\nGetVisitor.prototype.visitTimestampNanosecond = wrapGet(getTimestampNanosecond);\nGetVisitor.prototype.visitTime = wrapGet(getTime);\nGetVisitor.prototype.visitTimeSecond = wrapGet(getTimeSecond);\nGetVisitor.prototype.visitTimeMillisecond = wrapGet(getTimeMillisecond);\nGetVisitor.prototype.visitTimeMicrosecond = wrapGet(getTimeMicrosecond);\nGetVisitor.prototype.visitTimeNanosecond = wrapGet(getTimeNanosecond);\nGetVisitor.prototype.visitDecimal = wrapGet(getDecimal);\nGetVisitor.prototype.visitList = wrapGet(getList);\nGetVisitor.prototype.visitStruct = wrapGet(getStruct);\nGetVisitor.prototype.visitUnion = wrapGet(getUnion);\nGetVisitor.prototype.visitDenseUnion = wrapGet(getDenseUnion);\nGetVisitor.prototype.visitSparseUnion = wrapGet(getSparseUnion);\nGetVisitor.prototype.visitDictionary = wrapGet(getDictionary);\nGetVisitor.prototype.visitInterval = wrapGet(getInterval);\nGetVisitor.prototype.visitIntervalDayTime = wrapGet(getIntervalDayTime);\nGetVisitor.prototype.visitIntervalYearMonth = wrapGet(getIntervalYearMonth);\nGetVisitor.prototype.visitFixedSizeList = wrapGet(getFixedSizeList);\nGetVisitor.prototype.visitMap = wrapGet(getMap);\n/** @ignore */\nexport const instance = new GetVisitor();","map":{"version":3,"names":["BN","Vector","Visitor","MapRow","StructRow","decodeUtf8","uint16ToFloat64","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","GetVisitor","wrapGet","fn","data","_1","getValid","epochDaysToMs","index","epochMillisecondsLongToMs","epochMicrosecondsLongToMs","epochNanosecondsLongToMs","epochMillisecondsToDate","epochMs","Date","epochDaysToDate","epochMillisecondsLongToDate","getNull","_data","_index","getVariableWidthBytes","values","valueOffsets","length","x","y","subarray","getBool","_ref","offset","idx","byte","getDateDay","_ref2","getDateMillisecond","_ref3","getNumeric","_ref4","stride","getFloat16","_ref5","getBigInts","_ref6","getFixedSizeBinary","_ref7","getBinary","_ref8","getUtf8","_ref9","bytes","getInt","_ref10","getFloat","_ref11","type","precision","HALF","getDate","unit","DAY","getTimestampSecond","_ref12","getTimestampMillisecond","_ref13","getTimestampMicrosecond","_ref14","getTimestampNanosecond","_ref15","getTimestamp","SECOND","MILLISECOND","MICROSECOND","NANOSECOND","getTimeSecond","_ref16","getTimeMillisecond","_ref17","getTimeMicrosecond","_ref18","getTimeNanosecond","_ref19","getTime","getDecimal","_ref20","decimal","getList","children","begin","end","child","slice","getMap","getStruct","getUnion","mode","Dense","getDenseUnion","getSparseUnion","childIndex","typeIdToChildIndex","typeIds","instance","visit","getDictionary","_a","dictionary","get","getInterval","DAY_TIME","getIntervalDayTime","getIntervalYearMonth","_ref21","_ref22","interval","int32s","Int32Array","Math","trunc","getFixedSizeList","prototype","visitNull","visitBool","visitInt","visitInt8","visitInt16","visitInt32","visitInt64","visitUint8","visitUint16","visitUint32","visitUint64","visitFloat","visitFloat16","visitFloat32","visitFloat64","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","visitDateDay","visitDateMillisecond","visitTimestamp","visitTimestampSecond","visitTimestampMillisecond","visitTimestampMicrosecond","visitTimestampNanosecond","visitTime","visitTimeSecond","visitTimeMillisecond","visitTimeMicrosecond","visitTimeNanosecond","visitDecimal","visitList","visitStruct","visitUnion","visitDenseUnion","visitSparseUnion","visitDictionary","visitInterval","visitIntervalDayTime","visitIntervalYearMonth","visitFixedSizeList","visitMap"],"sources":["C:\\Users\\emclulo\\Downloads\\GitHub\\Banco_de_Dados--Associacao_Sindrome_de_Down\\timetable_canvas\\frontend\\node_modules\\apache-arrow\\src\\visitor\\get.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Data } from '../data.js';\r\nimport { BN } from '../util/bn.js';\r\nimport { Vector } from '../vector.js';\r\nimport { Visitor } from '../visitor.js';\r\nimport { MapRow } from '../row/map.js';\r\nimport { StructRow, StructRowProxy } from '../row/struct.js';\r\nimport { decodeUtf8 } from '../util/utf8.js';\r\nimport { TypeToDataType } from '../interfaces.js';\r\nimport { uint16ToFloat64 } from '../util/math.js';\r\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum.js';\r\nimport {\r\n    DataType, Dictionary,\r\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\r\n    Float, Float16, Float32, Float64,\r\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\r\n    Date_, DateDay, DateMillisecond,\r\n    Interval, IntervalDayTime, IntervalYearMonth,\r\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\r\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\r\n    Union, DenseUnion, SparseUnion,\r\n} from '../type.js';\r\n\r\n/** @ignore */\r\nexport interface GetVisitor extends Visitor {\r\n    visit<T extends DataType>(node: Data<T>, index: number): T['TValue'] | null;\r\n    visitMany<T extends DataType>(nodes: Data<T>[], indices: number[]): (T['TValue'] | null)[];\r\n    getVisitFn<T extends DataType>(node: Vector<T> | Data<T> | T): (data: Data<T>, index: number) => T['TValue'] | null;\r\n    getVisitFn<T extends Type>(node: T): (data: Data<TypeToDataType<T>>, index: number) => TypeToDataType<T>['TValue'];\r\n    visitNull<T extends Null>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitBool<T extends Bool>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitInt<T extends Int>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitInt8<T extends Int8>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitInt16<T extends Int16>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitInt32<T extends Int32>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitInt64<T extends Int64>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitUint8<T extends Uint8>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitUint16<T extends Uint16>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitUint32<T extends Uint32>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitUint64<T extends Uint64>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitFloat<T extends Float>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitFloat16<T extends Float16>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitFloat32<T extends Float32>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitFloat64<T extends Float64>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitUtf8<T extends Utf8>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitBinary<T extends Binary>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitFixedSizeBinary<T extends FixedSizeBinary>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitDate<T extends Date_>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitDateDay<T extends DateDay>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitDateMillisecond<T extends DateMillisecond>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitTimestamp<T extends Timestamp>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitTimestampSecond<T extends TimestampSecond>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitTimestampMillisecond<T extends TimestampMillisecond>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitTimestampMicrosecond<T extends TimestampMicrosecond>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitTimestampNanosecond<T extends TimestampNanosecond>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitTime<T extends Time>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitTimeSecond<T extends TimeSecond>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitTimeMillisecond<T extends TimeMillisecond>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitTimeMicrosecond<T extends TimeMicrosecond>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitTimeNanosecond<T extends TimeNanosecond>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitDecimal<T extends Decimal>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitList<T extends List>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitStruct<T extends Struct>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitUnion<T extends Union>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitDenseUnion<T extends DenseUnion>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitSparseUnion<T extends SparseUnion>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitDictionary<T extends Dictionary>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitInterval<T extends Interval>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitIntervalDayTime<T extends IntervalDayTime>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitIntervalYearMonth<T extends IntervalYearMonth>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitFixedSizeList<T extends FixedSizeList>(data: Data<T>, index: number): T['TValue'] | null;\r\n    visitMap<T extends Map_>(data: Data<T>, index: number): T['TValue'] | null;\r\n}\r\n\r\n/** @ignore */\r\nexport class GetVisitor extends Visitor { }\r\n\r\n/** @ignore */\r\nfunction wrapGet<T extends DataType>(fn: (data: Data<T>, _1: any) => any) {\r\n    return (data: Data<T>, _1: any) => data.getValid(_1) ? fn(data, _1) : null;\r\n}\r\n\r\n/** @ignore */const epochDaysToMs = (data: Int32Array, index: number) => 86400000 * data[index];\r\n/** @ignore */const epochMillisecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1]) + (data[index] >>> 0);\r\n/** @ignore */const epochMicrosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000);\r\n/** @ignore */const epochNanosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000);\r\n\r\n/** @ignore */const epochMillisecondsToDate = (epochMs: number) => new Date(epochMs);\r\n/** @ignore */const epochDaysToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochDaysToMs(data, index));\r\n/** @ignore */const epochMillisecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\r\n\r\n/** @ignore */\r\nconst getNull = <T extends Null>(_data: Data<T>, _index: number): T['TValue'] => null;\r\n/** @ignore */\r\nconst getVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number) => {\r\n    if (index + 1 >= valueOffsets.length) {\r\n        return null as any;\r\n    }\r\n    const x = valueOffsets[index];\r\n    const y = valueOffsets[index + 1];\r\n    return values.subarray(x, y);\r\n};\r\n\r\n/** @ignore */\r\nconst getBool = <T extends Bool>({ offset, values }: Data<T>, index: number): T['TValue'] => {\r\n    const idx = offset + index;\r\n    const byte = values[idx >> 3];\r\n    return (byte & 1 << (idx % 8)) !== 0;\r\n};\r\n\r\n/** @ignore */\r\ntype Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\r\n/** @ignore */\r\ntype Numeric2X = Int64 | Uint64;\r\n\r\n/** @ignore */\r\nconst getDateDay = <T extends DateDay>({ values }: Data<T>, index: number): T['TValue'] => epochDaysToDate(values, index);\r\n/** @ignore */\r\nconst getDateMillisecond = <T extends DateMillisecond>({ values }: Data<T>, index: number): T['TValue'] => epochMillisecondsLongToDate(values, index * 2);\r\n/** @ignore */\r\nconst getNumeric = <T extends Numeric1X>({ stride, values }: Data<T>, index: number): T['TValue'] => values[stride * index];\r\n/** @ignore */\r\nconst getFloat16 = <T extends Float16>({ stride, values }: Data<T>, index: number): T['TValue'] => uint16ToFloat64(values[stride * index]);\r\n/** @ignore */\r\nconst getBigInts = <T extends Numeric2X>({ values }: Data<T>, index: number): T['TValue'] => values[index];\r\n/** @ignore */\r\nconst getFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: Data<T>, index: number): T['TValue'] => values.subarray(stride * index, stride * (index + 1));\r\n\r\n/** @ignore */\r\nconst getBinary = <T extends Binary>({ values, valueOffsets }: Data<T>, index: number): T['TValue'] => getVariableWidthBytes(values, valueOffsets, index);\r\n/** @ignore */\r\nconst getUtf8 = <T extends Utf8>({ values, valueOffsets }: Data<T>, index: number): T['TValue'] => {\r\n    const bytes = getVariableWidthBytes(values, valueOffsets, index);\r\n    return bytes !== null ? decodeUtf8(bytes) : null as any;\r\n};\r\n\r\n/* istanbul ignore next */\r\n/** @ignore */\r\nconst getInt = <T extends Int>({ values }: Data<T>, index: number): T['TValue'] => values[index];\r\n\r\n/* istanbul ignore next */\r\n/** @ignore */\r\nconst getFloat = <T extends Float>({ type, values }: Data<T>, index: number): T['TValue'] => (\r\n    type.precision !== Precision.HALF ? values[index] : uint16ToFloat64(values[index])\r\n);\r\n\r\n/* istanbul ignore next */\r\n/** @ignore */\r\nconst getDate = <T extends Date_>(data: Data<T>, index: number): T['TValue'] => (\r\n    data.type.unit === DateUnit.DAY\r\n        ? getDateDay(data as Data<DateDay>, index)\r\n        : getDateMillisecond(data as Data<DateMillisecond>, index)\r\n);\r\n\r\n/** @ignore */\r\nconst getTimestampSecond = <T extends TimestampSecond>({ values }: Data<T>, index: number): T['TValue'] => 1000 * epochMillisecondsLongToMs(values, index * 2);\r\n/** @ignore */\r\nconst getTimestampMillisecond = <T extends TimestampMillisecond>({ values }: Data<T>, index: number): T['TValue'] => epochMillisecondsLongToMs(values, index * 2);\r\n/** @ignore */\r\nconst getTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: Data<T>, index: number): T['TValue'] => epochMicrosecondsLongToMs(values, index * 2);\r\n/** @ignore */\r\nconst getTimestampNanosecond = <T extends TimestampNanosecond>({ values }: Data<T>, index: number): T['TValue'] => epochNanosecondsLongToMs(values, index * 2);\r\n/* istanbul ignore next */\r\n/** @ignore */\r\nconst getTimestamp = <T extends Timestamp>(data: Data<T>, index: number): T['TValue'] => {\r\n    switch (data.type.unit) {\r\n        case TimeUnit.SECOND: return getTimestampSecond(data as Data<TimestampSecond>, index);\r\n        case TimeUnit.MILLISECOND: return getTimestampMillisecond(data as Data<TimestampMillisecond>, index);\r\n        case TimeUnit.MICROSECOND: return getTimestampMicrosecond(data as Data<TimestampMicrosecond>, index);\r\n        case TimeUnit.NANOSECOND: return getTimestampNanosecond(data as Data<TimestampNanosecond>, index);\r\n    }\r\n};\r\n\r\n/** @ignore */\r\nconst getTimeSecond = <T extends TimeSecond>({ values }: Data<T>, index: number): T['TValue'] => values[index];\r\n/** @ignore */\r\nconst getTimeMillisecond = <T extends TimeMillisecond>({ values }: Data<T>, index: number): T['TValue'] => values[index];\r\n/** @ignore */\r\nconst getTimeMicrosecond = <T extends TimeMicrosecond>({ values }: Data<T>, index: number): T['TValue'] => values[index];\r\n/** @ignore */\r\nconst getTimeNanosecond = <T extends TimeNanosecond>({ values }: Data<T>, index: number): T['TValue'] => values[index];\r\n/* istanbul ignore next */\r\n/** @ignore */\r\nconst getTime = <T extends Time>(data: Data<T>, index: number): T['TValue'] => {\r\n    switch (data.type.unit) {\r\n        case TimeUnit.SECOND: return getTimeSecond(data as Data<TimeSecond>, index);\r\n        case TimeUnit.MILLISECOND: return getTimeMillisecond(data as Data<TimeMillisecond>, index);\r\n        case TimeUnit.MICROSECOND: return getTimeMicrosecond(data as Data<TimeMicrosecond>, index);\r\n        case TimeUnit.NANOSECOND: return getTimeNanosecond(data as Data<TimeNanosecond>, index);\r\n    }\r\n};\r\n\r\n/** @ignore */\r\nconst getDecimal = <T extends Decimal>({ values, stride }: Data<T>, index: number): T['TValue'] => BN.decimal(values.subarray(stride * index, stride * (index + 1)));\r\n\r\n/** @ignore */\r\nconst getList = <T extends List>(data: Data<T>, index: number): T['TValue'] => {\r\n    const { valueOffsets, stride, children } = data;\r\n    const { [index * stride]: begin, [index * stride + 1]: end } = valueOffsets;\r\n    const child: Data<T['valueType']> = children[0];\r\n    const slice = child.slice(begin, end - begin);\r\n    return new Vector([slice]) as T['TValue'];\r\n};\r\n\r\n/** @ignore */\r\nconst getMap = <T extends Map_>(data: Data<T>, index: number): T['TValue'] => {\r\n    const { valueOffsets, children } = data;\r\n    const { [index]: begin, [index + 1]: end } = valueOffsets;\r\n    const child = children[0] as Data<T['childType']>;\r\n    return new MapRow(child.slice(begin, end - begin));\r\n};\r\n\r\n/** @ignore */\r\nconst getStruct = <T extends Struct>(data: Data<T>, index: number): T['TValue'] => {\r\n    return new StructRow(data, index) as StructRowProxy<T['TValue']>;\r\n};\r\n\r\n/* istanbul ignore next */\r\n/** @ignore */\r\nconst getUnion = <\r\n    D extends Data<Union> | Data<DenseUnion> | Data<SparseUnion>\r\n>(data: D, index: number): D['TValue'] => {\r\n    return data.type.mode === UnionMode.Dense ?\r\n        getDenseUnion(data as Data<DenseUnion>, index) :\r\n        getSparseUnion(data as Data<SparseUnion>, index);\r\n};\r\n\r\n/** @ignore */\r\nconst getDenseUnion = <T extends DenseUnion>(data: Data<T>, index: number): T['TValue'] => {\r\n    const childIndex = data.type.typeIdToChildIndex[data.typeIds[index]];\r\n    const child = data.children[childIndex];\r\n    return instance.visit(child, data.valueOffsets[index]);\r\n};\r\n\r\n/** @ignore */\r\nconst getSparseUnion = <T extends SparseUnion>(data: Data<T>, index: number): T['TValue'] => {\r\n    const childIndex = data.type.typeIdToChildIndex[data.typeIds[index]];\r\n    const child = data.children[childIndex];\r\n    return instance.visit(child, index);\r\n};\r\n\r\n/** @ignore */\r\nconst getDictionary = <T extends Dictionary>(data: Data<T>, index: number): T['TValue'] => {\r\n    return data.dictionary?.get(data.values[index]);\r\n};\r\n\r\n/* istanbul ignore next */\r\n/** @ignore */\r\nconst getInterval = <T extends Interval>(data: Data<T>, index: number): T['TValue'] =>\r\n    (data.type.unit === IntervalUnit.DAY_TIME)\r\n        ? getIntervalDayTime(data as Data<IntervalDayTime>, index)\r\n        : getIntervalYearMonth(data as Data<IntervalYearMonth>, index);\r\n\r\n/** @ignore */\r\nconst getIntervalDayTime = <T extends IntervalDayTime>({ values }: Data<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * (index + 1));\r\n\r\n/** @ignore */\r\nconst getIntervalYearMonth = <T extends IntervalYearMonth>({ values }: Data<T>, index: number): T['TValue'] => {\r\n    const interval = values[index];\r\n    const int32s = new Int32Array(2);\r\n    int32s[0] = Math.trunc(interval / 12); /* years */\r\n    int32s[1] = Math.trunc(interval % 12); /* months */\r\n    return int32s;\r\n};\r\n\r\n/** @ignore */\r\nconst getFixedSizeList = <T extends FixedSizeList>(data: Data<T>, index: number): T['TValue'] => {\r\n    const { stride, children } = data;\r\n    const child: Data<T['valueType']> = children[0];\r\n    const slice = child.slice(index * stride, stride);\r\n    return new Vector([slice]);\r\n};\r\n\r\nGetVisitor.prototype.visitNull = wrapGet(getNull);\r\nGetVisitor.prototype.visitBool = wrapGet(getBool);\r\nGetVisitor.prototype.visitInt = wrapGet(getInt);\r\nGetVisitor.prototype.visitInt8 = wrapGet(getNumeric);\r\nGetVisitor.prototype.visitInt16 = wrapGet(getNumeric);\r\nGetVisitor.prototype.visitInt32 = wrapGet(getNumeric);\r\nGetVisitor.prototype.visitInt64 = wrapGet(getBigInts);\r\nGetVisitor.prototype.visitUint8 = wrapGet(getNumeric);\r\nGetVisitor.prototype.visitUint16 = wrapGet(getNumeric);\r\nGetVisitor.prototype.visitUint32 = wrapGet(getNumeric);\r\nGetVisitor.prototype.visitUint64 = wrapGet(getBigInts);\r\nGetVisitor.prototype.visitFloat = wrapGet(getFloat);\r\nGetVisitor.prototype.visitFloat16 = wrapGet(getFloat16);\r\nGetVisitor.prototype.visitFloat32 = wrapGet(getNumeric);\r\nGetVisitor.prototype.visitFloat64 = wrapGet(getNumeric);\r\nGetVisitor.prototype.visitUtf8 = wrapGet(getUtf8);\r\nGetVisitor.prototype.visitBinary = wrapGet(getBinary);\r\nGetVisitor.prototype.visitFixedSizeBinary = wrapGet(getFixedSizeBinary);\r\nGetVisitor.prototype.visitDate = wrapGet(getDate);\r\nGetVisitor.prototype.visitDateDay = wrapGet(getDateDay);\r\nGetVisitor.prototype.visitDateMillisecond = wrapGet(getDateMillisecond);\r\nGetVisitor.prototype.visitTimestamp = wrapGet(getTimestamp);\r\nGetVisitor.prototype.visitTimestampSecond = wrapGet(getTimestampSecond);\r\nGetVisitor.prototype.visitTimestampMillisecond = wrapGet(getTimestampMillisecond);\r\nGetVisitor.prototype.visitTimestampMicrosecond = wrapGet(getTimestampMicrosecond);\r\nGetVisitor.prototype.visitTimestampNanosecond = wrapGet(getTimestampNanosecond);\r\nGetVisitor.prototype.visitTime = wrapGet(getTime);\r\nGetVisitor.prototype.visitTimeSecond = wrapGet(getTimeSecond);\r\nGetVisitor.prototype.visitTimeMillisecond = wrapGet(getTimeMillisecond);\r\nGetVisitor.prototype.visitTimeMicrosecond = wrapGet(getTimeMicrosecond);\r\nGetVisitor.prototype.visitTimeNanosecond = wrapGet(getTimeNanosecond);\r\nGetVisitor.prototype.visitDecimal = wrapGet(getDecimal);\r\nGetVisitor.prototype.visitList = wrapGet(getList);\r\nGetVisitor.prototype.visitStruct = wrapGet(getStruct);\r\nGetVisitor.prototype.visitUnion = wrapGet(getUnion);\r\nGetVisitor.prototype.visitDenseUnion = wrapGet(getDenseUnion);\r\nGetVisitor.prototype.visitSparseUnion = wrapGet(getSparseUnion);\r\nGetVisitor.prototype.visitDictionary = wrapGet(getDictionary);\r\nGetVisitor.prototype.visitInterval = wrapGet(getInterval);\r\nGetVisitor.prototype.visitIntervalDayTime = wrapGet(getIntervalDayTime);\r\nGetVisitor.prototype.visitIntervalYearMonth = wrapGet(getIntervalYearMonth);\r\nGetVisitor.prototype.visitFixedSizeList = wrapGet(getFixedSizeList);\r\nGetVisitor.prototype.visitMap = wrapGet(getMap);\r\n\r\n/** @ignore */\r\nexport const instance = new GetVisitor();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}