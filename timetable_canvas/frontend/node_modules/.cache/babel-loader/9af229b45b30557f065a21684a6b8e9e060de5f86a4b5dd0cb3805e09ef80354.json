{"ast":null,"code":"// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { BodyCompressionMethod } from './body-compression-method.mjs';\nimport { CompressionType } from './compression-type.mjs';\n/**\r\n * Optional compression for the memory buffers constituting IPC message\r\n * bodies. Intended for use with RecordBatch but could be used for other\r\n * message types\r\n */\nexport class BodyCompression {\n  constructor() {\n    this.bb = null;\n    this.bb_pos = 0;\n  }\n  __init(i, bb) {\n    this.bb_pos = i;\n    this.bb = bb;\n    return this;\n  }\n  static getRootAsBodyCompression(bb, obj) {\n    return (obj || new BodyCompression()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n  }\n  static getSizePrefixedRootAsBodyCompression(bb, obj) {\n    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n    return (obj || new BodyCompression()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n  }\n  /**\r\n   * Compressor library.\r\n   * For LZ4_FRAME, each compressed buffer must consist of a single frame.\r\n   */\n  codec() {\n    const offset = this.bb.__offset(this.bb_pos, 4);\n    return offset ? this.bb.readInt8(this.bb_pos + offset) : CompressionType.LZ4_FRAME;\n  }\n  /**\r\n   * Indicates the way the record batch body was compressed\r\n   */\n  method() {\n    const offset = this.bb.__offset(this.bb_pos, 6);\n    return offset ? this.bb.readInt8(this.bb_pos + offset) : BodyCompressionMethod.BUFFER;\n  }\n  static startBodyCompression(builder) {\n    builder.startObject(2);\n  }\n  static addCodec(builder, codec) {\n    builder.addFieldInt8(0, codec, CompressionType.LZ4_FRAME);\n  }\n  static addMethod(builder, method) {\n    builder.addFieldInt8(1, method, BodyCompressionMethod.BUFFER);\n  }\n  static endBodyCompression(builder) {\n    const offset = builder.endObject();\n    return offset;\n  }\n  static createBodyCompression(builder, codec, method) {\n    BodyCompression.startBodyCompression(builder);\n    BodyCompression.addCodec(builder, codec);\n    BodyCompression.addMethod(builder, method);\n    return BodyCompression.endBodyCompression(builder);\n  }\n}","map":{"version":3,"names":["flatbuffers","BodyCompressionMethod","CompressionType","BodyCompression","constructor","bb","bb_pos","__init","i","getRootAsBodyCompression","obj","readInt32","position","getSizePrefixedRootAsBodyCompression","setPosition","SIZE_PREFIX_LENGTH","codec","offset","__offset","readInt8","LZ4_FRAME","method","BUFFER","startBodyCompression","builder","startObject","addCodec","addFieldInt8","addMethod","endBodyCompression","endObject","createBodyCompression"],"sources":["C:\\Users\\emclulo\\Downloads\\GitHub\\Banco_de_Dados--Associacao_Sindrome_de_Down\\timetable_canvas\\frontend\\node_modules\\apache-arrow\\src\\fb\\body-compression.ts"],"sourcesContent":["// automatically generated by the FlatBuffers compiler, do not modify\r\n\r\nimport * as flatbuffers from 'flatbuffers';\r\n\r\nimport { BodyCompressionMethod } from './body-compression-method.js';\r\nimport { CompressionType } from './compression-type.js';\r\n\r\n\r\n/**\r\n * Optional compression for the memory buffers constituting IPC message\r\n * bodies. Intended for use with RecordBatch but could be used for other\r\n * message types\r\n */\r\nexport class BodyCompression {\r\n  bb: flatbuffers.ByteBuffer|null = null;\r\n  bb_pos = 0;\r\n__init(i:number, bb:flatbuffers.ByteBuffer):BodyCompression {\r\n  this.bb_pos = i;\r\n  this.bb = bb;\r\n  return this;\r\n}\r\n\r\nstatic getRootAsBodyCompression(bb:flatbuffers.ByteBuffer, obj?:BodyCompression):BodyCompression {\r\n  return (obj || new BodyCompression()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n}\r\n\r\nstatic getSizePrefixedRootAsBodyCompression(bb:flatbuffers.ByteBuffer, obj?:BodyCompression):BodyCompression {\r\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n  return (obj || new BodyCompression()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n}\r\n\r\n/**\r\n * Compressor library.\r\n * For LZ4_FRAME, each compressed buffer must consist of a single frame.\r\n */\r\ncodec():CompressionType {\r\n  const offset = this.bb!.__offset(this.bb_pos, 4);\r\n  return offset ? this.bb!.readInt8(this.bb_pos + offset) : CompressionType.LZ4_FRAME;\r\n}\r\n\r\n/**\r\n * Indicates the way the record batch body was compressed\r\n */\r\nmethod():BodyCompressionMethod {\r\n  const offset = this.bb!.__offset(this.bb_pos, 6);\r\n  return offset ? this.bb!.readInt8(this.bb_pos + offset) : BodyCompressionMethod.BUFFER;\r\n}\r\n\r\nstatic startBodyCompression(builder:flatbuffers.Builder) {\r\n  builder.startObject(2);\r\n}\r\n\r\nstatic addCodec(builder:flatbuffers.Builder, codec:CompressionType) {\r\n  builder.addFieldInt8(0, codec, CompressionType.LZ4_FRAME);\r\n}\r\n\r\nstatic addMethod(builder:flatbuffers.Builder, method:BodyCompressionMethod) {\r\n  builder.addFieldInt8(1, method, BodyCompressionMethod.BUFFER);\r\n}\r\n\r\nstatic endBodyCompression(builder:flatbuffers.Builder):flatbuffers.Offset {\r\n  const offset = builder.endObject();\r\n  return offset;\r\n}\r\n\r\nstatic createBodyCompression(builder:flatbuffers.Builder, codec:CompressionType, method:BodyCompressionMethod):flatbuffers.Offset {\r\n  BodyCompression.startBodyCompression(builder);\r\n  BodyCompression.addCodec(builder, codec);\r\n  BodyCompression.addMethod(builder, method);\r\n  return BodyCompression.endBodyCompression(builder);\r\n}\r\n}\r\n"],"mappings":"AAAA;AAEA,OAAO,KAAKA,WAAW,MAAM,aAAa;AAE1C,SAASC,qBAAqB,QAAQ,+BAA+B;AACrE,SAASC,eAAe,QAAQ,wBAAwB;AAGxD;;;;;AAKA,OAAM,MAAOC,eAAe;EAA5BC,YAAA;IACE,KAAAC,EAAE,GAAgC,IAAI;IACtC,KAAAC,MAAM,GAAG,CAAC;EAwDZ;EAvDAC,MAAMA,CAACC,CAAQ,EAAEH,EAAyB;IACxC,IAAI,CAACC,MAAM,GAAGE,CAAC;IACf,IAAI,CAACH,EAAE,GAAGA,EAAE;IACZ,OAAO,IAAI;EACb;EAEA,OAAOI,wBAAwBA,CAACJ,EAAyB,EAAEK,GAAoB;IAC7E,OAAO,CAACA,GAAG,IAAI,IAAIP,eAAe,EAAE,EAAEI,MAAM,CAACF,EAAE,CAACM,SAAS,CAACN,EAAE,CAACO,QAAQ,EAAE,CAAC,GAAGP,EAAE,CAACO,QAAQ,EAAE,EAAEP,EAAE,CAAC;EAC/F;EAEA,OAAOQ,oCAAoCA,CAACR,EAAyB,EAAEK,GAAoB;IACzFL,EAAE,CAACS,WAAW,CAACT,EAAE,CAACO,QAAQ,EAAE,GAAGZ,WAAW,CAACe,kBAAkB,CAAC;IAC9D,OAAO,CAACL,GAAG,IAAI,IAAIP,eAAe,EAAE,EAAEI,MAAM,CAACF,EAAE,CAACM,SAAS,CAACN,EAAE,CAACO,QAAQ,EAAE,CAAC,GAAGP,EAAE,CAACO,QAAQ,EAAE,EAAEP,EAAE,CAAC;EAC/F;EAEA;;;;EAIAW,KAAKA,CAAA;IACH,MAAMC,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACa,QAAQ,CAAC,IAAI,CAACZ,MAAM,EAAE,CAAC,CAAC;IAChD,OAAOW,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACc,QAAQ,CAAC,IAAI,CAACb,MAAM,GAAGW,MAAM,CAAC,GAAGf,eAAe,CAACkB,SAAS;EACrF;EAEA;;;EAGAC,MAAMA,CAAA;IACJ,MAAMJ,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACa,QAAQ,CAAC,IAAI,CAACZ,MAAM,EAAE,CAAC,CAAC;IAChD,OAAOW,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACc,QAAQ,CAAC,IAAI,CAACb,MAAM,GAAGW,MAAM,CAAC,GAAGhB,qBAAqB,CAACqB,MAAM;EACxF;EAEA,OAAOC,oBAAoBA,CAACC,OAA2B;IACrDA,OAAO,CAACC,WAAW,CAAC,CAAC,CAAC;EACxB;EAEA,OAAOC,QAAQA,CAACF,OAA2B,EAAER,KAAqB;IAChEQ,OAAO,CAACG,YAAY,CAAC,CAAC,EAAEX,KAAK,EAAEd,eAAe,CAACkB,SAAS,CAAC;EAC3D;EAEA,OAAOQ,SAASA,CAACJ,OAA2B,EAAEH,MAA4B;IACxEG,OAAO,CAACG,YAAY,CAAC,CAAC,EAAEN,MAAM,EAAEpB,qBAAqB,CAACqB,MAAM,CAAC;EAC/D;EAEA,OAAOO,kBAAkBA,CAACL,OAA2B;IACnD,MAAMP,MAAM,GAAGO,OAAO,CAACM,SAAS,EAAE;IAClC,OAAOb,MAAM;EACf;EAEA,OAAOc,qBAAqBA,CAACP,OAA2B,EAAER,KAAqB,EAAEK,MAA4B;IAC3GlB,eAAe,CAACoB,oBAAoB,CAACC,OAAO,CAAC;IAC7CrB,eAAe,CAACuB,QAAQ,CAACF,OAAO,EAAER,KAAK,CAAC;IACxCb,eAAe,CAACyB,SAAS,CAACJ,OAAO,EAAEH,MAAM,CAAC;IAC1C,OAAOlB,eAAe,CAAC0B,kBAAkB,CAACL,OAAO,CAAC;EACpD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}