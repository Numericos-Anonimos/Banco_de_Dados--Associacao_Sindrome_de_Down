{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { __awaiter } from \"tslib\";\nimport { ByteStream, AsyncByteStream } from './stream.mjs';\nimport { toUint8Array } from '../util/buffer.mjs';\n/** @ignore */\nexport class RandomAccessFile extends ByteStream {\n  constructor(buffer, byteLength) {\n    super();\n    this.position = 0;\n    this.buffer = toUint8Array(buffer);\n    this.size = typeof byteLength === 'undefined' ? this.buffer.byteLength : byteLength;\n  }\n  readInt32(position) {\n    const {\n      buffer,\n      byteOffset\n    } = this.readAt(position, 4);\n    return new DataView(buffer, byteOffset).getInt32(0, true);\n  }\n  seek(position) {\n    this.position = Math.min(position, this.size);\n    return position < this.size;\n  }\n  read(nBytes) {\n    const {\n      buffer,\n      size,\n      position\n    } = this;\n    if (buffer && position < size) {\n      if (typeof nBytes !== 'number') {\n        nBytes = Number.POSITIVE_INFINITY;\n      }\n      this.position = Math.min(size, position + Math.min(size - position, nBytes));\n      return buffer.subarray(position, this.position);\n    }\n    return null;\n  }\n  readAt(position, nBytes) {\n    const buf = this.buffer;\n    const end = Math.min(this.size, position + nBytes);\n    return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n  }\n  close() {\n    this.buffer && (this.buffer = null);\n  }\n  throw(value) {\n    this.close();\n    return {\n      done: true,\n      value\n    };\n  }\n  return(value) {\n    this.close();\n    return {\n      done: true,\n      value\n    };\n  }\n}\n/** @ignore */\nexport class AsyncRandomAccessFile extends AsyncByteStream {\n  constructor(file, byteLength) {\n    super();\n    this.position = 0;\n    this._handle = file;\n    if (typeof byteLength === 'number') {\n      this.size = byteLength;\n    } else {\n      this._pending = (() => __awaiter(this, void 0, void 0, function* () {\n        this.size = (yield file.stat()).size;\n        delete this._pending;\n      }))();\n    }\n  }\n  readInt32(position) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        buffer,\n        byteOffset\n      } = yield this.readAt(position, 4);\n      return new DataView(buffer, byteOffset).getInt32(0, true);\n    });\n  }\n  seek(position) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._pending && (yield this._pending);\n      this.position = Math.min(position, this.size);\n      return position < this.size;\n    });\n  }\n  read(nBytes) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._pending && (yield this._pending);\n      const {\n        _handle: file,\n        size,\n        position\n      } = this;\n      if (file && position < size) {\n        if (typeof nBytes !== 'number') {\n          nBytes = Number.POSITIVE_INFINITY;\n        }\n        let pos = position,\n          offset = 0,\n          bytesRead = 0;\n        const end = Math.min(size, pos + Math.min(size - pos, nBytes));\n        const buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n        while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\n          ({\n            bytesRead\n          } = yield file.read(buffer, offset, buffer.byteLength - offset, pos));\n        }\n        return buffer;\n      }\n      return null;\n    });\n  }\n  readAt(position, nBytes) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._pending && (yield this._pending);\n      const {\n        _handle: file,\n        size\n      } = this;\n      if (file && position + nBytes < size) {\n        const end = Math.min(size, position + nBytes);\n        const buffer = new Uint8Array(end - position);\n        return (yield file.read(buffer, 0, nBytes, position)).buffer;\n      }\n      return new Uint8Array(nBytes);\n    });\n  }\n  close() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const f = this._handle;\n      this._handle = null;\n      f && (yield f.close());\n    });\n  }\n  throw(value) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.close();\n      return {\n        done: true,\n        value\n      };\n    });\n  }\n  return(value) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.close();\n      return {\n        done: true,\n        value\n      };\n    });\n  }\n}","map":{"version":3,"names":["ByteStream","AsyncByteStream","toUint8Array","RandomAccessFile","constructor","buffer","byteLength","position","size","readInt32","byteOffset","readAt","DataView","getInt32","seek","Math","min","read","nBytes","Number","POSITIVE_INFINITY","subarray","buf","end","Uint8Array","close","throw","value","done","return","AsyncRandomAccessFile","file","_handle","_pending","__awaiter","stat","pos","offset","bytesRead","max","f"],"sources":["C:\\Users\\emclulo\\Downloads\\GitHub\\Banco_de_Dados--Associacao_Sindrome_de_Down\\timetable_canvas\\frontend\\node_modules\\apache-arrow\\src\\io\\file.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { FileHandle } from './interfaces.js';\r\nimport { ByteStream, AsyncByteStream } from './stream.js';\r\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer.js';\r\n\r\n/** @ignore */\r\nexport class RandomAccessFile extends ByteStream {\r\n    public size: number;\r\n    public position = 0;\r\n    protected buffer: Uint8Array | null;\r\n    constructor(buffer: ArrayBufferViewInput, byteLength?: number) {\r\n        super();\r\n        this.buffer = toUint8Array(buffer);\r\n        this.size = typeof byteLength === 'undefined' ? this.buffer!.byteLength : byteLength;\r\n    }\r\n    public readInt32(position: number) {\r\n        const { buffer, byteOffset } = this.readAt(position, 4);\r\n        return new DataView(buffer, byteOffset).getInt32(0, true);\r\n    }\r\n    public seek(position: number) {\r\n        this.position = Math.min(position, this.size);\r\n        return position < this.size;\r\n    }\r\n    public read(nBytes?: number | null) {\r\n        const { buffer, size, position } = this;\r\n        if (buffer && position < size) {\r\n            if (typeof nBytes !== 'number') { nBytes = Number.POSITIVE_INFINITY; }\r\n            this.position = Math.min(size,\r\n                position + Math.min(size - position, nBytes));\r\n            return buffer.subarray(position, this.position);\r\n        }\r\n        return null;\r\n    }\r\n    public readAt(position: number, nBytes: number) {\r\n        const buf = this.buffer;\r\n        const end = Math.min(this.size, position + nBytes);\r\n        return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\r\n    }\r\n    public close() { this.buffer && (this.buffer = null); }\r\n    public throw(value?: any) { this.close(); return { done: true, value }; }\r\n    public return(value?: any) { this.close(); return { done: true, value }; }\r\n}\r\n\r\n/** @ignore */\r\nexport class AsyncRandomAccessFile extends AsyncByteStream {\r\n    declare public size: number;\r\n    public position = 0;\r\n    public _pending?: Promise<void>;\r\n    protected _handle: FileHandle | null;\r\n    constructor(file: FileHandle, byteLength?: number) {\r\n        super();\r\n        this._handle = file;\r\n        if (typeof byteLength === 'number') {\r\n            this.size = byteLength;\r\n        } else {\r\n            this._pending = (async () => {\r\n                this.size = (await file.stat()).size;\r\n                delete this._pending;\r\n            })();\r\n        }\r\n    }\r\n    public async readInt32(position: number) {\r\n        const { buffer, byteOffset } = await this.readAt(position, 4);\r\n        return new DataView(buffer, byteOffset).getInt32(0, true);\r\n    }\r\n    public async seek(position: number) {\r\n        this._pending && await this._pending;\r\n        this.position = Math.min(position, this.size);\r\n        return position < this.size;\r\n    }\r\n    public async read(nBytes?: number | null) {\r\n        this._pending && await this._pending;\r\n        const { _handle: file, size, position } = this;\r\n        if (file && position < size) {\r\n            if (typeof nBytes !== 'number') { nBytes = Number.POSITIVE_INFINITY; }\r\n            let pos = position, offset = 0, bytesRead = 0;\r\n            const end = Math.min(size, pos + Math.min(size - pos, nBytes));\r\n            const buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\r\n            while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\r\n                ({ bytesRead } = await file.read(buffer, offset, buffer.byteLength - offset, pos));\r\n            }\r\n            return buffer;\r\n        }\r\n        return null;\r\n    }\r\n    public async readAt(position: number, nBytes: number) {\r\n        this._pending && await this._pending;\r\n        const { _handle: file, size } = this;\r\n        if (file && (position + nBytes) < size) {\r\n            const end = Math.min(size, position + nBytes);\r\n            const buffer = new Uint8Array(end - position);\r\n            return (await file.read(buffer, 0, nBytes, position)).buffer;\r\n        }\r\n        return new Uint8Array(nBytes);\r\n    }\r\n    public async close() { const f = this._handle; this._handle = null; f && await f.close(); }\r\n    public async throw(value?: any) { await this.close(); return { done: true, value }; }\r\n    public async return(value?: any) { await this.close(); return { done: true, value }; }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}