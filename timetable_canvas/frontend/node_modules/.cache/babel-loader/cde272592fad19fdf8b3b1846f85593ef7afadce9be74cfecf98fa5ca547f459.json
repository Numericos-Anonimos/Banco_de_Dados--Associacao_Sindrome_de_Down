{"ast":null,"code":"// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\n/**\r\n * A Map is a logical nested type that is represented as\r\n *\r\n * List<entries: Struct<key: K, value: V>>\r\n *\r\n * In this layout, the keys and values are each respectively contiguous. We do\r\n * not constrain the key and value types, so the application is responsible\r\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\r\n * may be set in the metadata for this field.\r\n *\r\n * In a field with Map type, the field has a child Struct field, which then\r\n * has two children: key type and the second the value type. The names of the\r\n * child fields may be respectively \"entries\", \"key\", and \"value\", but this is\r\n * not enforced.\r\n *\r\n * Map\r\n * ```text\r\n *   - child[0] entries: Struct\r\n *     - child[0] key: K\r\n *     - child[1] value: V\r\n * ```\r\n * Neither the \"entries\" field nor the \"key\" field may be nullable.\r\n *\r\n * The metadata is structured so that Arrow systems without special handling\r\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\r\n * field must have the same contents as a List.\r\n */\nexport class Map {\n  constructor() {\n    this.bb = null;\n    this.bb_pos = 0;\n  }\n  __init(i, bb) {\n    this.bb_pos = i;\n    this.bb = bb;\n    return this;\n  }\n  static getRootAsMap(bb, obj) {\n    return (obj || new Map()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n  }\n  static getSizePrefixedRootAsMap(bb, obj) {\n    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n    return (obj || new Map()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n  }\n  /**\r\n   * Set to true if the keys within each value are sorted\r\n   */\n  keysSorted() {\n    const offset = this.bb.__offset(this.bb_pos, 4);\n    return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n  }\n  static startMap(builder) {\n    builder.startObject(1);\n  }\n  static addKeysSorted(builder, keysSorted) {\n    builder.addFieldInt8(0, +keysSorted, +false);\n  }\n  static endMap(builder) {\n    const offset = builder.endObject();\n    return offset;\n  }\n  static createMap(builder, keysSorted) {\n    Map.startMap(builder);\n    Map.addKeysSorted(builder, keysSorted);\n    return Map.endMap(builder);\n  }\n}","map":{"version":3,"names":["flatbuffers","Map","constructor","bb","bb_pos","__init","i","getRootAsMap","obj","readInt32","position","getSizePrefixedRootAsMap","setPosition","SIZE_PREFIX_LENGTH","keysSorted","offset","__offset","readInt8","startMap","builder","startObject","addKeysSorted","addFieldInt8","endMap","endObject","createMap"],"sources":["C:\\Users\\emclulo\\Downloads\\GitHub\\Banco_de_Dados--Associacao_Sindrome_de_Down\\timetable_canvas\\frontend\\node_modules\\apache-arrow\\src\\fb\\map.ts"],"sourcesContent":["// automatically generated by the FlatBuffers compiler, do not modify\r\n\r\nimport * as flatbuffers from 'flatbuffers';\r\n\r\n/**\r\n * A Map is a logical nested type that is represented as\r\n *\r\n * List<entries: Struct<key: K, value: V>>\r\n *\r\n * In this layout, the keys and values are each respectively contiguous. We do\r\n * not constrain the key and value types, so the application is responsible\r\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\r\n * may be set in the metadata for this field.\r\n *\r\n * In a field with Map type, the field has a child Struct field, which then\r\n * has two children: key type and the second the value type. The names of the\r\n * child fields may be respectively \"entries\", \"key\", and \"value\", but this is\r\n * not enforced.\r\n *\r\n * Map\r\n * ```text\r\n *   - child[0] entries: Struct\r\n *     - child[0] key: K\r\n *     - child[1] value: V\r\n * ```\r\n * Neither the \"entries\" field nor the \"key\" field may be nullable.\r\n *\r\n * The metadata is structured so that Arrow systems without special handling\r\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\r\n * field must have the same contents as a List.\r\n */\r\nexport class Map {\r\n  bb: flatbuffers.ByteBuffer|null = null;\r\n  bb_pos = 0;\r\n__init(i:number, bb:flatbuffers.ByteBuffer):Map {\r\n  this.bb_pos = i;\r\n  this.bb = bb;\r\n  return this;\r\n}\r\n\r\nstatic getRootAsMap(bb:flatbuffers.ByteBuffer, obj?:Map):Map {\r\n  return (obj || new Map()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n}\r\n\r\nstatic getSizePrefixedRootAsMap(bb:flatbuffers.ByteBuffer, obj?:Map):Map {\r\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n  return (obj || new Map()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n}\r\n\r\n/**\r\n * Set to true if the keys within each value are sorted\r\n */\r\nkeysSorted():boolean {\r\n  const offset = this.bb!.__offset(this.bb_pos, 4);\r\n  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\r\n}\r\n\r\nstatic startMap(builder:flatbuffers.Builder) {\r\n  builder.startObject(1);\r\n}\r\n\r\nstatic addKeysSorted(builder:flatbuffers.Builder, keysSorted:boolean) {\r\n  builder.addFieldInt8(0, +keysSorted, +false);\r\n}\r\n\r\nstatic endMap(builder:flatbuffers.Builder):flatbuffers.Offset {\r\n  const offset = builder.endObject();\r\n  return offset;\r\n}\r\n\r\nstatic createMap(builder:flatbuffers.Builder, keysSorted:boolean):flatbuffers.Offset {\r\n  Map.startMap(builder);\r\n  Map.addKeysSorted(builder, keysSorted);\r\n  return Map.endMap(builder);\r\n}\r\n}\r\n"],"mappings":"AAAA;AAEA,OAAO,KAAKA,WAAW,MAAM,aAAa;AAE1C;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,OAAM,MAAOC,GAAG;EAAhBC,YAAA;IACE,KAAAC,EAAE,GAAgC,IAAI;IACtC,KAAAC,MAAM,GAAG,CAAC;EA0CZ;EAzCAC,MAAMA,CAACC,CAAQ,EAAEH,EAAyB;IACxC,IAAI,CAACC,MAAM,GAAGE,CAAC;IACf,IAAI,CAACH,EAAE,GAAGA,EAAE;IACZ,OAAO,IAAI;EACb;EAEA,OAAOI,YAAYA,CAACJ,EAAyB,EAAEK,GAAQ;IACrD,OAAO,CAACA,GAAG,IAAI,IAAIP,GAAG,EAAE,EAAEI,MAAM,CAACF,EAAE,CAACM,SAAS,CAACN,EAAE,CAACO,QAAQ,EAAE,CAAC,GAAGP,EAAE,CAACO,QAAQ,EAAE,EAAEP,EAAE,CAAC;EACnF;EAEA,OAAOQ,wBAAwBA,CAACR,EAAyB,EAAEK,GAAQ;IACjEL,EAAE,CAACS,WAAW,CAACT,EAAE,CAACO,QAAQ,EAAE,GAAGV,WAAW,CAACa,kBAAkB,CAAC;IAC9D,OAAO,CAACL,GAAG,IAAI,IAAIP,GAAG,EAAE,EAAEI,MAAM,CAACF,EAAE,CAACM,SAAS,CAACN,EAAE,CAACO,QAAQ,EAAE,CAAC,GAAGP,EAAE,CAACO,QAAQ,EAAE,EAAEP,EAAE,CAAC;EACnF;EAEA;;;EAGAW,UAAUA,CAAA;IACR,MAAMC,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACa,QAAQ,CAAC,IAAI,CAACZ,MAAM,EAAE,CAAC,CAAC;IAChD,OAAOW,MAAM,GAAG,CAAC,CAAC,IAAI,CAACZ,EAAG,CAACc,QAAQ,CAAC,IAAI,CAACb,MAAM,GAAGW,MAAM,CAAC,GAAG,KAAK;EACnE;EAEA,OAAOG,QAAQA,CAACC,OAA2B;IACzCA,OAAO,CAACC,WAAW,CAAC,CAAC,CAAC;EACxB;EAEA,OAAOC,aAAaA,CAACF,OAA2B,EAAEL,UAAkB;IAClEK,OAAO,CAACG,YAAY,CAAC,CAAC,EAAE,CAACR,UAAU,EAAE,CAAC,KAAK,CAAC;EAC9C;EAEA,OAAOS,MAAMA,CAACJ,OAA2B;IACvC,MAAMJ,MAAM,GAAGI,OAAO,CAACK,SAAS,EAAE;IAClC,OAAOT,MAAM;EACf;EAEA,OAAOU,SAASA,CAACN,OAA2B,EAAEL,UAAkB;IAC9Db,GAAG,CAACiB,QAAQ,CAACC,OAAO,CAAC;IACrBlB,GAAG,CAACoB,aAAa,CAACF,OAAO,EAAEL,UAAU,CAAC;IACtC,OAAOb,GAAG,CAACsB,MAAM,CAACJ,OAAO,CAAC;EAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}