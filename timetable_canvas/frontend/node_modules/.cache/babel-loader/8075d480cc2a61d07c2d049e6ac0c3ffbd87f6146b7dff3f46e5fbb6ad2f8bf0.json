{"ast":null,"code":"// automatically generated by the FlatBuffers compiler, do not modify\n/**\r\n * ----------------------------------------------------------------------\r\n * Data structures for describing a table row batch (a collection of\r\n * equal-length Arrow arrays)\r\n * Metadata about a field at some level of a nested type tree (but not\r\n * its children).\r\n *\r\n * For example, a List<Int16> with values `[[1, 2, 3], null, [4], [5, 6], null]`\r\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\r\n * null_count: 0} for its Int16 node, as separate FieldNode structs\r\n */\nexport class FieldNode {\n  constructor() {\n    this.bb = null;\n    this.bb_pos = 0;\n  }\n  __init(i, bb) {\n    this.bb_pos = i;\n    this.bb = bb;\n    return this;\n  }\n  /**\r\n   * The number of value slots in the Arrow array at this level of a nested\r\n   * tree\r\n   */\n  length() {\n    return this.bb.readInt64(this.bb_pos);\n  }\n  /**\r\n   * The number of observed nulls. Fields with null_count == 0 may choose not\r\n   * to write their physical validity bitmap out as a materialized buffer,\r\n   * instead setting the length of the bitmap buffer to 0.\r\n   */\n  nullCount() {\n    return this.bb.readInt64(this.bb_pos + 8);\n  }\n  static sizeOf() {\n    return 16;\n  }\n  static createFieldNode(builder, length, null_count) {\n    builder.prep(8, 16);\n    builder.writeInt64(null_count);\n    builder.writeInt64(length);\n    return builder.offset();\n  }\n}","map":{"version":3,"names":["FieldNode","constructor","bb","bb_pos","__init","i","length","readInt64","nullCount","sizeOf","createFieldNode","builder","null_count","prep","writeInt64","offset"],"sources":["C:\\Users\\emclulo\\Downloads\\GitHub\\Banco_de_Dados--Associacao_Sindrome_de_Down\\timetable_canvas\\frontend\\node_modules\\apache-arrow\\src\\fb\\field-node.ts"],"sourcesContent":["// automatically generated by the FlatBuffers compiler, do not modify\r\n\r\nimport * as flatbuffers from 'flatbuffers';\r\n\r\n/**\r\n * ----------------------------------------------------------------------\r\n * Data structures for describing a table row batch (a collection of\r\n * equal-length Arrow arrays)\r\n * Metadata about a field at some level of a nested type tree (but not\r\n * its children).\r\n *\r\n * For example, a List<Int16> with values `[[1, 2, 3], null, [4], [5, 6], null]`\r\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\r\n * null_count: 0} for its Int16 node, as separate FieldNode structs\r\n */\r\nexport class FieldNode {\r\n  bb: flatbuffers.ByteBuffer|null = null;\r\n  bb_pos = 0;\r\n__init(i:number, bb:flatbuffers.ByteBuffer):FieldNode {\r\n  this.bb_pos = i;\r\n  this.bb = bb;\r\n  return this;\r\n}\r\n\r\n/**\r\n * The number of value slots in the Arrow array at this level of a nested\r\n * tree\r\n */\r\nlength():flatbuffers.Long {\r\n  return this.bb!.readInt64(this.bb_pos);\r\n}\r\n\r\n/**\r\n * The number of observed nulls. Fields with null_count == 0 may choose not\r\n * to write their physical validity bitmap out as a materialized buffer,\r\n * instead setting the length of the bitmap buffer to 0.\r\n */\r\nnullCount():flatbuffers.Long {\r\n  return this.bb!.readInt64(this.bb_pos + 8);\r\n}\r\n\r\nstatic sizeOf():number {\r\n  return 16;\r\n}\r\n\r\nstatic createFieldNode(builder:flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long):flatbuffers.Offset {\r\n  builder.prep(8, 16);\r\n  builder.writeInt64(null_count);\r\n  builder.writeInt64(length);\r\n  return builder.offset();\r\n}\r\n\r\n}\r\n"],"mappings":"AAAA;AAIA;;;;;;;;;;;AAWA,OAAM,MAAOA,SAAS;EAAtBC,YAAA;IACE,KAAAC,EAAE,GAAgC,IAAI;IACtC,KAAAC,MAAM,GAAG,CAAC;EAmCZ;EAlCAC,MAAMA,CAACC,CAAQ,EAAEH,EAAyB;IACxC,IAAI,CAACC,MAAM,GAAGE,CAAC;IACf,IAAI,CAACH,EAAE,GAAGA,EAAE;IACZ,OAAO,IAAI;EACb;EAEA;;;;EAIAI,MAAMA,CAAA;IACJ,OAAO,IAAI,CAACJ,EAAG,CAACK,SAAS,CAAC,IAAI,CAACJ,MAAM,CAAC;EACxC;EAEA;;;;;EAKAK,SAASA,CAAA;IACP,OAAO,IAAI,CAACN,EAAG,CAACK,SAAS,CAAC,IAAI,CAACJ,MAAM,GAAG,CAAC,CAAC;EAC5C;EAEA,OAAOM,MAAMA,CAAA;IACX,OAAO,EAAE;EACX;EAEA,OAAOC,eAAeA,CAACC,OAA2B,EAAEL,MAAwB,EAAEM,UAA4B;IACxGD,OAAO,CAACE,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC;IACnBF,OAAO,CAACG,UAAU,CAACF,UAAU,CAAC;IAC9BD,OAAO,CAACG,UAAU,CAACR,MAAM,CAAC;IAC1B,OAAOK,OAAO,CAACI,MAAM,EAAE;EACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}