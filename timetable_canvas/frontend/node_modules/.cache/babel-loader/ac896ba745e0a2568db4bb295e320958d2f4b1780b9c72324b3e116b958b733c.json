{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor.mjs';\nimport { Type, Precision } from '../enum.mjs';\nimport { Float, Int, Time } from '../type.mjs';\nimport { ChunkedIterator } from '../util/chunk.mjs';\n/** @ignore */\nexport class IteratorVisitor extends Visitor {}\n/** @ignore */\nfunction vectorIterator(vector) {\n  const {\n    type\n  } = vector;\n  // Fast case, defer to native iterators if possible\n  if (vector.nullCount === 0 && vector.stride === 1 && (type.typeId === Type.Timestamp || type instanceof Int && type.bitWidth !== 64 || type instanceof Time && type.bitWidth !== 64 || type instanceof Float && type.precision !== Precision.HALF)) {\n    return new ChunkedIterator(vector.data.length, chunkIndex => {\n      const data = vector.data[chunkIndex];\n      return data.values.subarray(0, data.length)[Symbol.iterator]();\n    });\n  }\n  // Otherwise, iterate manually\n  let offset = 0;\n  return new ChunkedIterator(vector.data.length, chunkIndex => {\n    const data = vector.data[chunkIndex];\n    const length = data.length;\n    const inner = vector.slice(offset, offset + length);\n    offset += length;\n    return new VectorIterator(inner);\n  });\n}\n/** @ignore */\nclass VectorIterator {\n  constructor(vector) {\n    this.vector = vector;\n    this.index = 0;\n  }\n  next() {\n    if (this.index < this.vector.length) {\n      return {\n        value: this.vector.get(this.index++)\n      };\n    }\n    return {\n      done: true,\n      value: null\n    };\n  }\n  [Symbol.iterator]() {\n    return this;\n  }\n}\nIteratorVisitor.prototype.visitNull = vectorIterator;\nIteratorVisitor.prototype.visitBool = vectorIterator;\nIteratorVisitor.prototype.visitInt = vectorIterator;\nIteratorVisitor.prototype.visitInt8 = vectorIterator;\nIteratorVisitor.prototype.visitInt16 = vectorIterator;\nIteratorVisitor.prototype.visitInt32 = vectorIterator;\nIteratorVisitor.prototype.visitInt64 = vectorIterator;\nIteratorVisitor.prototype.visitUint8 = vectorIterator;\nIteratorVisitor.prototype.visitUint16 = vectorIterator;\nIteratorVisitor.prototype.visitUint32 = vectorIterator;\nIteratorVisitor.prototype.visitUint64 = vectorIterator;\nIteratorVisitor.prototype.visitFloat = vectorIterator;\nIteratorVisitor.prototype.visitFloat16 = vectorIterator;\nIteratorVisitor.prototype.visitFloat32 = vectorIterator;\nIteratorVisitor.prototype.visitFloat64 = vectorIterator;\nIteratorVisitor.prototype.visitUtf8 = vectorIterator;\nIteratorVisitor.prototype.visitBinary = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeBinary = vectorIterator;\nIteratorVisitor.prototype.visitDate = vectorIterator;\nIteratorVisitor.prototype.visitDateDay = vectorIterator;\nIteratorVisitor.prototype.visitDateMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestamp = vectorIterator;\nIteratorVisitor.prototype.visitTimestampSecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampNanosecond = vectorIterator;\nIteratorVisitor.prototype.visitTime = vectorIterator;\nIteratorVisitor.prototype.visitTimeSecond = vectorIterator;\nIteratorVisitor.prototype.visitTimeMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimeMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimeNanosecond = vectorIterator;\nIteratorVisitor.prototype.visitDecimal = vectorIterator;\nIteratorVisitor.prototype.visitList = vectorIterator;\nIteratorVisitor.prototype.visitStruct = vectorIterator;\nIteratorVisitor.prototype.visitUnion = vectorIterator;\nIteratorVisitor.prototype.visitDenseUnion = vectorIterator;\nIteratorVisitor.prototype.visitSparseUnion = vectorIterator;\nIteratorVisitor.prototype.visitDictionary = vectorIterator;\nIteratorVisitor.prototype.visitInterval = vectorIterator;\nIteratorVisitor.prototype.visitIntervalDayTime = vectorIterator;\nIteratorVisitor.prototype.visitIntervalYearMonth = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeList = vectorIterator;\nIteratorVisitor.prototype.visitMap = vectorIterator;\n/** @ignore */\nexport const instance = new IteratorVisitor();","map":{"version":3,"names":["Visitor","Type","Precision","Float","Int","Time","ChunkedIterator","IteratorVisitor","vectorIterator","vector","type","nullCount","stride","typeId","Timestamp","bitWidth","precision","HALF","data","length","chunkIndex","values","subarray","Symbol","iterator","offset","inner","slice","VectorIterator","constructor","index","next","value","get","done","prototype","visitNull","visitBool","visitInt","visitInt8","visitInt16","visitInt32","visitInt64","visitUint8","visitUint16","visitUint32","visitUint64","visitFloat","visitFloat16","visitFloat32","visitFloat64","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","visitDateDay","visitDateMillisecond","visitTimestamp","visitTimestampSecond","visitTimestampMillisecond","visitTimestampMicrosecond","visitTimestampNanosecond","visitTime","visitTimeSecond","visitTimeMillisecond","visitTimeMicrosecond","visitTimeNanosecond","visitDecimal","visitList","visitStruct","visitUnion","visitDenseUnion","visitSparseUnion","visitDictionary","visitInterval","visitIntervalDayTime","visitIntervalYearMonth","visitFixedSizeList","visitMap","instance"],"sources":["C:\\Users\\emclulo\\Downloads\\GitHub\\Banco_de_Dados--Associacao_Sindrome_de_Down\\timetable_canvas\\frontend\\node_modules\\apache-arrow\\src\\visitor\\iterator.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\r\n// or more contributor license agreements.  See the NOTICE file\r\n// distributed with this work for additional information\r\n// regarding copyright ownership.  The ASF licenses this file\r\n// to you under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance\r\n// with the License.  You may obtain a copy of the License at\r\n//\r\n//   http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing,\r\n// software distributed under the License is distributed on an\r\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied.  See the License for the\r\n// specific language governing permissions and limitations\r\n// under the License.\r\n\r\nimport { Vector } from '../vector.js';\r\nimport { Visitor } from '../visitor.js';\r\nimport { Type, Precision } from '../enum.js';\r\nimport { TypeToDataType } from '../interfaces.js';\r\nimport {\r\n    DataType, Dictionary,\r\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\r\n    Float, Float16, Float32, Float64,\r\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\r\n    Date_, DateDay, DateMillisecond,\r\n    Interval, IntervalDayTime, IntervalYearMonth,\r\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\r\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\r\n    Union, DenseUnion, SparseUnion,\r\n} from '../type.js';\r\nimport { ChunkedIterator } from '../util/chunk.js';\r\n\r\n/** @ignore */\r\nexport interface IteratorVisitor extends Visitor {\r\n    visit<T extends Vector>(node: T): IterableIterator<T['TValue'] | null>;\r\n    visitMany<T extends Vector>(nodes: T[]): IterableIterator<T['TValue'] | null>[];\r\n    getVisitFn<T extends DataType>(node: Vector<T> | T): (vector: Vector<T>) => IterableIterator<T['TValue'] | null>;\r\n    getVisitFn<T extends Type>(node: T): (vector: Vector<TypeToDataType<T>>) => IterableIterator<TypeToDataType<T>['TValue'] | null>;\r\n    visitNull<T extends Null>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitBool<T extends Bool>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitInt<T extends Int>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitInt8<T extends Int8>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitInt16<T extends Int16>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitInt32<T extends Int32>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitInt64<T extends Int64>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitUint8<T extends Uint8>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitUint16<T extends Uint16>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitUint32<T extends Uint32>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitUint64<T extends Uint64>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitFloat<T extends Float>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitFloat16<T extends Float16>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitFloat32<T extends Float32>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitFloat64<T extends Float64>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitUtf8<T extends Utf8>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitBinary<T extends Binary>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitFixedSizeBinary<T extends FixedSizeBinary>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitDate<T extends Date_>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitDateDay<T extends DateDay>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitDateMillisecond<T extends DateMillisecond>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitTimestamp<T extends Timestamp>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitTimestampSecond<T extends TimestampSecond>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitTimestampMillisecond<T extends TimestampMillisecond>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitTimestampMicrosecond<T extends TimestampMicrosecond>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitTimestampNanosecond<T extends TimestampNanosecond>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitTime<T extends Time>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitTimeSecond<T extends TimeSecond>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitTimeMillisecond<T extends TimeMillisecond>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitTimeMicrosecond<T extends TimeMicrosecond>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitTimeNanosecond<T extends TimeNanosecond>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitDecimal<T extends Decimal>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitList<T extends List>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitStruct<T extends Struct>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitUnion<T extends Union>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitDenseUnion<T extends DenseUnion>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitSparseUnion<T extends SparseUnion>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitDictionary<T extends Dictionary>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitInterval<T extends Interval>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitIntervalDayTime<T extends IntervalDayTime>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitIntervalYearMonth<T extends IntervalYearMonth>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitFixedSizeList<T extends FixedSizeList>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n    visitMap<T extends Map_>(vector: Vector<T>): IterableIterator<T['TValue'] | null>;\r\n}\r\n\r\n/** @ignore */\r\nexport class IteratorVisitor extends Visitor { }\r\n\r\n/** @ignore */\r\nfunction vectorIterator<T extends DataType>(vector: Vector<T>): IterableIterator<T['TValue'] | null> {\r\n\r\n    const { type } = vector;\r\n\r\n    // Fast case, defer to native iterators if possible\r\n    if (vector.nullCount === 0 && vector.stride === 1 && (\r\n        (type.typeId === Type.Timestamp) ||\r\n        (type instanceof Int && (type as Int).bitWidth !== 64) ||\r\n        (type instanceof Time && (type as Time).bitWidth !== 64) ||\r\n        (type instanceof Float && (type as Float).precision !== Precision.HALF)\r\n    )) {\r\n        return new ChunkedIterator(vector.data.length, (chunkIndex) => {\r\n            const data = vector.data[chunkIndex];\r\n            return data.values.subarray(0, data.length)[Symbol.iterator]();\r\n        });\r\n    }\r\n\r\n    // Otherwise, iterate manually\r\n    let offset = 0;\r\n    return new ChunkedIterator(vector.data.length, (chunkIndex) => {\r\n        const data = vector.data[chunkIndex];\r\n        const length = data.length;\r\n        const inner = vector.slice(offset, offset + length);\r\n        offset += length;\r\n        return new VectorIterator(inner);\r\n    });\r\n}\r\n\r\n/** @ignore */\r\nclass VectorIterator<T extends DataType> implements IterableIterator<T['TValue'] | null> {\r\n    private index = 0;\r\n\r\n    constructor(private vector: Vector<T>) { }\r\n\r\n    next(): IteratorResult<T['TValue'] | null> {\r\n        if (this.index < this.vector.length) {\r\n            return {\r\n                value: this.vector.get(this.index++)\r\n            };\r\n        }\r\n\r\n        return { done: true, value: null };\r\n    }\r\n\r\n    [Symbol.iterator]() {\r\n        return this;\r\n    }\r\n}\r\n\r\nIteratorVisitor.prototype.visitNull = vectorIterator;\r\nIteratorVisitor.prototype.visitBool = vectorIterator;\r\nIteratorVisitor.prototype.visitInt = vectorIterator;\r\nIteratorVisitor.prototype.visitInt8 = vectorIterator;\r\nIteratorVisitor.prototype.visitInt16 = vectorIterator;\r\nIteratorVisitor.prototype.visitInt32 = vectorIterator;\r\nIteratorVisitor.prototype.visitInt64 = vectorIterator;\r\nIteratorVisitor.prototype.visitUint8 = vectorIterator;\r\nIteratorVisitor.prototype.visitUint16 = vectorIterator;\r\nIteratorVisitor.prototype.visitUint32 = vectorIterator;\r\nIteratorVisitor.prototype.visitUint64 = vectorIterator;\r\nIteratorVisitor.prototype.visitFloat = vectorIterator;\r\nIteratorVisitor.prototype.visitFloat16 = vectorIterator;\r\nIteratorVisitor.prototype.visitFloat32 = vectorIterator;\r\nIteratorVisitor.prototype.visitFloat64 = vectorIterator;\r\nIteratorVisitor.prototype.visitUtf8 = vectorIterator;\r\nIteratorVisitor.prototype.visitBinary = vectorIterator;\r\nIteratorVisitor.prototype.visitFixedSizeBinary = vectorIterator;\r\nIteratorVisitor.prototype.visitDate = vectorIterator;\r\nIteratorVisitor.prototype.visitDateDay = vectorIterator;\r\nIteratorVisitor.prototype.visitDateMillisecond = vectorIterator;\r\nIteratorVisitor.prototype.visitTimestamp = vectorIterator;\r\nIteratorVisitor.prototype.visitTimestampSecond = vectorIterator;\r\nIteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;\r\nIteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;\r\nIteratorVisitor.prototype.visitTimestampNanosecond = vectorIterator;\r\nIteratorVisitor.prototype.visitTime = vectorIterator;\r\nIteratorVisitor.prototype.visitTimeSecond = vectorIterator;\r\nIteratorVisitor.prototype.visitTimeMillisecond = vectorIterator;\r\nIteratorVisitor.prototype.visitTimeMicrosecond = vectorIterator;\r\nIteratorVisitor.prototype.visitTimeNanosecond = vectorIterator;\r\nIteratorVisitor.prototype.visitDecimal = vectorIterator;\r\nIteratorVisitor.prototype.visitList = vectorIterator;\r\nIteratorVisitor.prototype.visitStruct = vectorIterator;\r\nIteratorVisitor.prototype.visitUnion = vectorIterator;\r\nIteratorVisitor.prototype.visitDenseUnion = vectorIterator;\r\nIteratorVisitor.prototype.visitSparseUnion = vectorIterator;\r\nIteratorVisitor.prototype.visitDictionary = vectorIterator;\r\nIteratorVisitor.prototype.visitInterval = vectorIterator;\r\nIteratorVisitor.prototype.visitIntervalDayTime = vectorIterator;\r\nIteratorVisitor.prototype.visitIntervalYearMonth = vectorIterator;\r\nIteratorVisitor.prototype.visitFixedSizeList = vectorIterator;\r\nIteratorVisitor.prototype.visitMap = vectorIterator;\r\n\r\n/** @ignore */\r\nexport const instance = new IteratorVisitor();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}