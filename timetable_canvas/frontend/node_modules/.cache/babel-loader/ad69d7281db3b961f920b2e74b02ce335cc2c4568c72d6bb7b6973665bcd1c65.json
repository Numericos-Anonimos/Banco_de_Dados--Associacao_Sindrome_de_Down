{"ast":null,"code":"// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { TimeUnit } from './time-unit.mjs';\n/**\r\n * Time is either a 32-bit or 64-bit signed integer type representing an\r\n * elapsed time since midnight, stored in either of four units: seconds,\r\n * milliseconds, microseconds or nanoseconds.\r\n *\r\n * The integer `bitWidth` depends on the `unit` and must be one of the following:\r\n * * SECOND and MILLISECOND: 32 bits\r\n * * MICROSECOND and NANOSECOND: 64 bits\r\n *\r\n * The allowed values are between 0 (inclusive) and 86400 (=24*60*60) seconds\r\n * (exclusive), adjusted for the time unit (for example, up to 86400000\r\n * exclusive for the MILLISECOND unit).\r\n * This definition doesn't allow for leap seconds. Time values from\r\n * measurements with leap seconds will need to be corrected when ingesting\r\n * into Arrow (for example by replacing the value 86400 with 86399).\r\n */\nexport class Time {\n  constructor() {\n    this.bb = null;\n    this.bb_pos = 0;\n  }\n  __init(i, bb) {\n    this.bb_pos = i;\n    this.bb = bb;\n    return this;\n  }\n  static getRootAsTime(bb, obj) {\n    return (obj || new Time()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n  }\n  static getSizePrefixedRootAsTime(bb, obj) {\n    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n    return (obj || new Time()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n  }\n  unit() {\n    const offset = this.bb.__offset(this.bb_pos, 4);\n    return offset ? this.bb.readInt16(this.bb_pos + offset) : TimeUnit.MILLISECOND;\n  }\n  bitWidth() {\n    const offset = this.bb.__offset(this.bb_pos, 6);\n    return offset ? this.bb.readInt32(this.bb_pos + offset) : 32;\n  }\n  static startTime(builder) {\n    builder.startObject(2);\n  }\n  static addUnit(builder, unit) {\n    builder.addFieldInt16(0, unit, TimeUnit.MILLISECOND);\n  }\n  static addBitWidth(builder, bitWidth) {\n    builder.addFieldInt32(1, bitWidth, 32);\n  }\n  static endTime(builder) {\n    const offset = builder.endObject();\n    return offset;\n  }\n  static createTime(builder, unit, bitWidth) {\n    Time.startTime(builder);\n    Time.addUnit(builder, unit);\n    Time.addBitWidth(builder, bitWidth);\n    return Time.endTime(builder);\n  }\n}","map":{"version":3,"names":["flatbuffers","TimeUnit","Time","constructor","bb","bb_pos","__init","i","getRootAsTime","obj","readInt32","position","getSizePrefixedRootAsTime","setPosition","SIZE_PREFIX_LENGTH","unit","offset","__offset","readInt16","MILLISECOND","bitWidth","startTime","builder","startObject","addUnit","addFieldInt16","addBitWidth","addFieldInt32","endTime","endObject","createTime"],"sources":["C:\\Users\\emclulo\\Downloads\\GitHub\\Banco_de_Dados--Associacao_Sindrome_de_Down\\timetable_canvas\\frontend\\node_modules\\apache-arrow\\src\\fb\\time.ts"],"sourcesContent":["// automatically generated by the FlatBuffers compiler, do not modify\r\n\r\nimport * as flatbuffers from 'flatbuffers';\r\n\r\nimport { TimeUnit } from './time-unit.js';\r\n\r\n\r\n/**\r\n * Time is either a 32-bit or 64-bit signed integer type representing an\r\n * elapsed time since midnight, stored in either of four units: seconds,\r\n * milliseconds, microseconds or nanoseconds.\r\n *\r\n * The integer `bitWidth` depends on the `unit` and must be one of the following:\r\n * * SECOND and MILLISECOND: 32 bits\r\n * * MICROSECOND and NANOSECOND: 64 bits\r\n *\r\n * The allowed values are between 0 (inclusive) and 86400 (=24*60*60) seconds\r\n * (exclusive), adjusted for the time unit (for example, up to 86400000\r\n * exclusive for the MILLISECOND unit).\r\n * This definition doesn't allow for leap seconds. Time values from\r\n * measurements with leap seconds will need to be corrected when ingesting\r\n * into Arrow (for example by replacing the value 86400 with 86399).\r\n */\r\nexport class Time {\r\n  bb: flatbuffers.ByteBuffer|null = null;\r\n  bb_pos = 0;\r\n__init(i:number, bb:flatbuffers.ByteBuffer):Time {\r\n  this.bb_pos = i;\r\n  this.bb = bb;\r\n  return this;\r\n}\r\n\r\nstatic getRootAsTime(bb:flatbuffers.ByteBuffer, obj?:Time):Time {\r\n  return (obj || new Time()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n}\r\n\r\nstatic getSizePrefixedRootAsTime(bb:flatbuffers.ByteBuffer, obj?:Time):Time {\r\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n  return (obj || new Time()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n}\r\n\r\nunit():TimeUnit {\r\n  const offset = this.bb!.__offset(this.bb_pos, 4);\r\n  return offset ? this.bb!.readInt16(this.bb_pos + offset) : TimeUnit.MILLISECOND;\r\n}\r\n\r\nbitWidth():number {\r\n  const offset = this.bb!.__offset(this.bb_pos, 6);\r\n  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 32;\r\n}\r\n\r\nstatic startTime(builder:flatbuffers.Builder) {\r\n  builder.startObject(2);\r\n}\r\n\r\nstatic addUnit(builder:flatbuffers.Builder, unit:TimeUnit) {\r\n  builder.addFieldInt16(0, unit, TimeUnit.MILLISECOND);\r\n}\r\n\r\nstatic addBitWidth(builder:flatbuffers.Builder, bitWidth:number) {\r\n  builder.addFieldInt32(1, bitWidth, 32);\r\n}\r\n\r\nstatic endTime(builder:flatbuffers.Builder):flatbuffers.Offset {\r\n  const offset = builder.endObject();\r\n  return offset;\r\n}\r\n\r\nstatic createTime(builder:flatbuffers.Builder, unit:TimeUnit, bitWidth:number):flatbuffers.Offset {\r\n  Time.startTime(builder);\r\n  Time.addUnit(builder, unit);\r\n  Time.addBitWidth(builder, bitWidth);\r\n  return Time.endTime(builder);\r\n}\r\n}\r\n"],"mappings":"AAAA;AAEA,OAAO,KAAKA,WAAW,MAAM,aAAa;AAE1C,SAASC,QAAQ,QAAQ,iBAAiB;AAG1C;;;;;;;;;;;;;;;;AAgBA,OAAM,MAAOC,IAAI;EAAjBC,YAAA;IACE,KAAAC,EAAE,GAAgC,IAAI;IACtC,KAAAC,MAAM,GAAG,CAAC;EAiDZ;EAhDAC,MAAMA,CAACC,CAAQ,EAAEH,EAAyB;IACxC,IAAI,CAACC,MAAM,GAAGE,CAAC;IACf,IAAI,CAACH,EAAE,GAAGA,EAAE;IACZ,OAAO,IAAI;EACb;EAEA,OAAOI,aAAaA,CAACJ,EAAyB,EAAEK,GAAS;IACvD,OAAO,CAACA,GAAG,IAAI,IAAIP,IAAI,EAAE,EAAEI,MAAM,CAACF,EAAE,CAACM,SAAS,CAACN,EAAE,CAACO,QAAQ,EAAE,CAAC,GAAGP,EAAE,CAACO,QAAQ,EAAE,EAAEP,EAAE,CAAC;EACpF;EAEA,OAAOQ,yBAAyBA,CAACR,EAAyB,EAAEK,GAAS;IACnEL,EAAE,CAACS,WAAW,CAACT,EAAE,CAACO,QAAQ,EAAE,GAAGX,WAAW,CAACc,kBAAkB,CAAC;IAC9D,OAAO,CAACL,GAAG,IAAI,IAAIP,IAAI,EAAE,EAAEI,MAAM,CAACF,EAAE,CAACM,SAAS,CAACN,EAAE,CAACO,QAAQ,EAAE,CAAC,GAAGP,EAAE,CAACO,QAAQ,EAAE,EAAEP,EAAE,CAAC;EACpF;EAEAW,IAAIA,CAAA;IACF,MAAMC,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACa,QAAQ,CAAC,IAAI,CAACZ,MAAM,EAAE,CAAC,CAAC;IAChD,OAAOW,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACc,SAAS,CAAC,IAAI,CAACb,MAAM,GAAGW,MAAM,CAAC,GAAGf,QAAQ,CAACkB,WAAW;EACjF;EAEAC,QAAQA,CAAA;IACN,MAAMJ,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACa,QAAQ,CAAC,IAAI,CAACZ,MAAM,EAAE,CAAC,CAAC;IAChD,OAAOW,MAAM,GAAG,IAAI,CAACZ,EAAG,CAACM,SAAS,CAAC,IAAI,CAACL,MAAM,GAAGW,MAAM,CAAC,GAAG,EAAE;EAC/D;EAEA,OAAOK,SAASA,CAACC,OAA2B;IAC1CA,OAAO,CAACC,WAAW,CAAC,CAAC,CAAC;EACxB;EAEA,OAAOC,OAAOA,CAACF,OAA2B,EAAEP,IAAa;IACvDO,OAAO,CAACG,aAAa,CAAC,CAAC,EAAEV,IAAI,EAAEd,QAAQ,CAACkB,WAAW,CAAC;EACtD;EAEA,OAAOO,WAAWA,CAACJ,OAA2B,EAAEF,QAAe;IAC7DE,OAAO,CAACK,aAAa,CAAC,CAAC,EAAEP,QAAQ,EAAE,EAAE,CAAC;EACxC;EAEA,OAAOQ,OAAOA,CAACN,OAA2B;IACxC,MAAMN,MAAM,GAAGM,OAAO,CAACO,SAAS,EAAE;IAClC,OAAOb,MAAM;EACf;EAEA,OAAOc,UAAUA,CAACR,OAA2B,EAAEP,IAAa,EAAEK,QAAe;IAC3ElB,IAAI,CAACmB,SAAS,CAACC,OAAO,CAAC;IACvBpB,IAAI,CAACsB,OAAO,CAACF,OAAO,EAAEP,IAAI,CAAC;IAC3Bb,IAAI,CAACwB,WAAW,CAACJ,OAAO,EAAEF,QAAQ,CAAC;IACnC,OAAOlB,IAAI,CAAC0B,OAAO,CAACN,OAAO,CAAC;EAC9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}